#!/usr/bin/env bash

_ble_bash=$((BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100+BASH_VERSINFO[2]))
if ((_ble_bash>=30100)); then
  function array#push { IFS=' ' eval "$1+=(\"\${@:2}\")"; }
else
  function array#push/impl {
    eval "$1[\${#$1[@]}]=\"\$2\""
  }
  function array#push {
    local v
    for v in "${@:2}"; do
      array#push/impl "$1" "$v"
    done
  }
fi

function string#split {
  set -f
  IFS=$2 builtin eval "$1=(\${*:3}\$2)"
  set +f
}


function GetExtension: {
  local _slash=/
  local v=$1; shift
  local cand=${1##*.}
  if [[ $cand != "$1" && ${cand/$_slash/} == "$cand" ]]; then
    eval "$v='.${1##*.}'"
  else
    eval "$v=''"
  fi
}

declare color_option=--color=auto
[[ -t 1 ]] && color_option=--color=always

declare -a findsrc_args
declare -a grep_opts=()
declare -a grep_files=()
regexp=

declare fDefaultExcludes=

optflags=
opt_regex=-E

shopt -s extglob
function process-arguments {
  while (($#)); do
    local arg=$1
    shift
    case "$arg" in
    (--help)
      cat <<EOF
usage: grc [options] pattern [files...]

options

  --help

grep options

  --color[=WHEN]
  -C NUMBER
  -U, --binary
  -F, --fixed-strings
  -i, --ignore-case
  -o, --only-matching
  -h, --no-filename
  -Wg OPTIONS
  -w, --word-regexp

findsrc options:

  -x, --extension=EXTENSIONS
  -a, --exclude-dotfile
  -A, --include-dotfile
  -b, --exclude-backup
  -B, --include-backup
  -t, --type=SRCTYPE
  --exclude=PATTERN

  --excludes-default

EOF
      exit ;;
    (-C)
      array#push grep_opts -C "$1"
      shift 1 ;;
    (-C?*)
      array#push grep_opts -C "${arg:2}" ;;
    (-F|--fixed-strings)
      opt_regex=-F ;;
    (-U|--binary|-F|--fixed-strings|-i|--ignore-case)
      array#push grep_opts "$arg" ;;
    (-Wg*)
      local oparg=${arg#-Wg} args=
      if [[ $oparg ]]; then
        oparg=${oparg#,}
      else
        oparg=$1
        shift 1
      fi
      string#split args , "$oparg"
      array#push grep_opts "${args[@]}" ;;

    (--color)
      color_option=--color=always ;;
    (--color=*)
      color_option=$arg ;;
    (-o|--only-matching) optflags=o$optflags ;;
    (-h|--no-filename) optflags=h$optflags ;;
    (-w|--word-regexp) optflags=w$optflags ;;
    (-x)
      array#push findsrc_args "$arg" "$1"
      shift 1 ;;
    (-[aAbB]|--@(ex|in)clude-@(dotfile|backup)|--exclude=*|--type=*|--exntesion=*)
      array#push findsrc_args "$arg" ;;
    (-t) # findsrc type
      array#push findsrc_args "$arg" "$1"
      shift 1 ;;
    (-t*) # findsrc type
      array#push findsrc_args -t "${arg:2}" ;;
    (-*)
      echo "$0: unknown option ($arg)" >&2
      exit 1 ;;
    ('')
      echo "$0: empty argument is invalid" >&2
      exit 1 ;;
    (--excludes-default)
      fDefaultExcludes=1 ;;
    (*)
      if [[ $regexp ]]; then
        if [[ $fDefaultExcludes ]]; then
          [[ $arg == *'~' ]] && continue

          local ext
          GetExtension: ext "$arg"
          case "$ext" in
          (.c|.cpp|.cc|.C|.cxx|.h|.hpp|.hxx|.hh|.inl) ;;
          (.js|.ctx|.css) ;;
          (*)
            continue ;;
          esac
        fi
        grep_files[${#grep_files[@]}]=$arg
      else
        regexp=$arg
      fi ;;
    esac
  done
}
process-arguments "$@"

if [[ -z $regexp ]]; then
  echo "$0: pattern is not specified!" >&2
  exit 2
fi

if ((${#grep_files[@]}==0)); then
  GLOBIGNORE=* IFS=$'\n' eval 'grep_files=($(findsrc "${findsrc_args[@]}"))'
fi

if ((${#grep_files[@]}>=1)); then
  array#push grep_opts "$opt_regex"
  [[ $optflags == *w* ]] && array#push grep_opts -w # (パターン) 単語に一致
  [[ $optflags == *o* ]] && array#push grep_opts -o # (出力) 一致部分のみ
  [[ $optflags == *h* ]] && array#push grep_opts -h # (出力) ファイル名を出力
  [[ $optflags == *n* || $optflags != *[ho]* ]] && array#push grep_opts -n # (出力) 行番号を出力
  [[ $optflags != *[ho]* ]] && array#push grep_opts -H # (出力) ファイル名を出力しない
  printf '%s\n' "${grep_files[@]}" | xargs grep $color_option "${grep_opts[@]}" "$regexp"
fi
