#!/usr/bin/env bash

if (($# < 1)); then
  echo "usage: $0 <filename>" >&2
  exit 1
fi

function checksum {
  if type -t md5sum &>/dev/null; then
    md5sum "$@"
  elif type -t md5 &>/dev/null; then
    md5 -r "$@"
  else
    cksum "$@"
  fi
}

function is_same {
  if [[ ! -f $1  || ! -f $2 ]]; then
    return 1
  else
    checksum "$1" "$2" | awk 'NR==1{hash1=$1}NR==2{hash2=$1}END{issame=hash1!=""&&hash2!=""&&hash1==hash2;exit !issame}' &>/dev/null
  fi
}

## @fn get_directory_name path
##   @var[out] REPLY
function get_directory_name {
  if [[ $1 != */* ]]; then
    REPLY=$PWD
  else
    REPLY=${1%/*}
  fi
}

## @fn get_parent_directory path
##   @var[out] REPLY
function get_parent_directory {
  if [[ $1 == / ]]; then
    REPLY=/
  else
    get_directory_name "${1%/}"
  fi
}

## @fn insert_date file date
##   @var[out] REPLY
function insert_date {
  local file=$1 date=$2

  local rex1='^(.*[^/])\.((tar\.)?[^/.]+)$'
  if [[ $file =~ $rex1 ]]; then
    local filename=${BASH_REMATCH[1]}
    local extension=${BASH_REMATCH[2]}
    REPLY=$filename.$date.$extension
  else
    REPLY=$file.$date
  fi
}

fMOVE=
fFORCE=
fTRAVERSE=

## @fn get_backup_directory path
##   @var[out] REPLY
##
##   @var[in] fTRAVERSE
function get_backup_directory {
  local file=$1
  get_directory_name "$file"
  local dir=$REPLY

  local out=
  if [[ ! $fTRAVERSE ]]; then
    local bkdir=$dir/backup
    [[ -d $bkdir ]] && out=$bkdir
  else
    local pdir=$dir
    while [[ ! -d $pdir/backup && ${pdir%[/.]} ]]; do
      get_parent_directory "$pdir"
      pdir=$REPLY
    done

    if [[ $pdir && -d $pdir/backup ]]; then
      local bkdir=$pdir/backup${dir:${#pdir}}
      [[ -d $bkdir ]] || mkdir -p "$bkdir"
      out=$bkdir
    fi
  fi
  REPLY=$out
}

function mwgbk_file {
  local file=$1
  if [[ ! -f $file ]]; then
    if [[ ! -e $file ]]; then
      echo "mwgbk! the file does not exist." >&2
    else
      echo "mwgbk! the file is not an ordinary file." >&2
    fi
    exit 2
  fi

  local REPLY

  local filebk=${file%'~'} rex_dotfile='^(.*/)?\.([^/]+)$'
  if [[ $filebk =~ $rex_dotfile ]]; then
    filebk=${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  fi
  get_backup_directory "$file"
  local bkdir=$REPLY
  if [[ $bkdir ]]; then
    filebk="$bkdir/${filebk##*/}"
  fi

  local date=$(date -r "$file" +'%Y%m%d')
  insert_date "$filebk" "$date"
  dst=$REPLY

  #----------------------------------------------------------------------------
  # avoid overwriting
  if [[ -e $dst ]]; then
    if [[ ! $fFORCE ]] && is_same "$file" "$dst"; then
      echo "mwgbk: the file '$file' has already backed up to '$dst'." >&2
      return 0
    fi

    date=$(date -r "$file" +'%Y%m%d-%H%M%S')
    insert_date "$filebk" "$date"
    dst=$REPLY
  fi

  i=0
  while [[ -e "$dst" ]]; do
    if [[ ! $fFORCE ]] && is_same "$file" "$dst"; then
      echo "mwgbk: the file '$file' has already backed up to '$dst'." >&2
      return 0
    fi

    insert_date "$filebk" "$date[$i]"
    dst=$REPLY
    i=$((i+1))
  done

  #----------------------------------------------------------------------------
  # copy the file

  if [[ ! $fMOVE ]]; then
    echo "copy $file to $dst"
    cp -p "$file" "$dst"
  else
    echo "move $file to $dst"
    mv "$file" "$dst"
  fi
}

function main {
  fFILE=
  while (($# >= 1)); do
    if [[ ! $fFILE && $1 == -* ]]; then
      if [[ $1 == --* ]]; then
        case ${1:2} in
        (help)
          ifold -i -s --indent='(  -[^ ]+)? +' -w 80 <<EOF >&2
mwgbk (akinomyoga/mshex)
Copyright 2011-2013, 2015, 2016, 2022, 2024 Koichi Murase
usage: mwgbk [options] files...

options
  -M        copy files into the backup directory.
            コピーしてバックアップを作成します。既定値の動作です。

  -m        move files to the backup directory instead of copying
            コピーしてバックアップを作成する代わりに、ファイルをバックアップ先に移動します。

  -F        (既定) 既に同内容のファイルがバックアップされているかどうかを確認し、バックアップされていれば新しいバックアップを省略します。

  -f        既にバックアップされているかの確認を省略し、常に新しくバックアップを行います。

  -t        ディレクトリを遡って backup ディレクトリを探索します。

  -T        (既定) ファイルの存在しているディレクトリ (dir1) 内の backup 子ディレクトリにバックアップします。backup が見付からない時は dir1 内に直接バックアップを作成します。

  --        以降の引数をファイル名と見做します。

  --help    簡単な使用方法を表示して終了します。

  --dir     既定のバックアップ先ディレクトリ名を表示します。

  --list    既定のバックアップ先ディレクトリ内のファイル一覧を表示します。

EOF
          exit ;;
        (dir)
          local REPLY
          fTRAVERSE=1 get_backup_directory .
          local bkdir=$REPLY
          [[ ! $bkdir ]] && bkdir=$PWD
          echo "$bkdir"
          exit ;;
        (list)
          shift

          local REPLY
          fTRAVERSE=1 get_backup_directory .
          local bkdir=$REPLY
          [[ ! $bkdir ]] && bkdir=$PWD
          echo "$bkdir"
          if type -t l &>/dev/null; then
            l "$@" "$bkdir"
          else
            ls -la "$@" "$bkdir"
          fi
          exit ;;
        ('')
          # 以降の引数はファイル名と見做す
          fFILE=1 ;;
        (*)
          echo "unknown long-name option '$1'" >&2
          exit 1 ;;
        esac
      else
        local i
        for ((i=1;i<${#1};i++)); do
          case ${1:i:1} in
          (m) fMOVE=1 ;;
          (M) fMOVE=  ;;
          (f) fFORCE=1;;
          (F) fFORCE= ;;
          (t) fTRAVERSE=1 ;;
          (T) fTRAVERSE=  ;;
          (*)
            echo "unknown option '-${1:i:1}'" >&2
            ;;
          esac
        done
      fi
    else
      mwgbk_file "$1"
    fi
    shift
  done
}
main "$@"
