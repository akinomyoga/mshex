#!/bin/bash

function mshex.yn {
  local prompt_yn='yes/no'
  local ret_default=
  case "$1" in
  -y)
    ret_default=0
    prompt_yn='Yes/no'
    shift ;;
  -n)
    ret_default=1
    prompt_yn='yes/No'
    shift ;;
  esac

  while read -ep "$* ($prompt_yn): " line; do
    case "x${line,,}" in
    (xyes)
      return 0 ;;
    (xno)
      return 1 ;;
    (x)
      if test -n "$ret_default"; then
        if test "$ret_default" -eq 0; then
          echo "$* ($prompt_yn): yes"
        else
          echo "$* ($prompt_yn): no"
        fi
        return "$ret_default"
      fi ;;
    esac
  done
}

shopt -s extglob

GSED=sed
isGNUSed=1
if [[ $OSTYPE == @(darwin*|bsd*|solaris*) ]]; then
  if type gsed; then
    GSED=gsed
  else
    isGNUSed=
  fi
fi

#------------------------------------------------------------------------------
# read arguments

function usage_exit {
  echo "usage: refact [options...] beforeExtendedRegex afterText [files...]" >&2
  exit 1
}
function print_help {
  ifold <<EOF
usage: refact [options...] [--] extended_regex after

OPTIONS

  --help        show this help

  -b, --word-boundary
  -B, --no-word-boundary
        set or reset the word-boundary condition.
        boundary is not set by default.

  -F, --fixed-strings

  -Wg,GRCOPTIONS
        set options for grc
        GRCOPTIONS is the options for grc separated with comma.

EOF
}

opt_options_end=

grc_options=(--color -U)
inputfiles=()

regex_type=E

fB=

flagHelp=
flagError=
before= flagBeforeSpecified=
after=  flagAfterSpecified=
while (($#)); do
  declare arg="$1"; shift
  if [[ ! $opt_options_end && $arg == -* ]]; then
    case "$arg" in
    (-b|--word-boundary)      fB=1 ;;
    (-B|--no-word-boundary)   fB= ;;
    (-F|--fixed-strings) regex_type=F ;;
    (-Wg,?*)
      IFS=, eval 'grc_options+=(${arg:4})' ;;
    (--help)
      flagHelp=1 ;;
    (--) opt_options_end=1 ;;
    (-*)
      echo "refact: unknown option ($arg)." >&2
      flagError=1 ;;
    esac
  else
    if [[ ! $flagBeforeSpecified ]]; then
      before=$arg
      flagBeforeSpecified=1
    elif [[ ! $flagAfterSpecified ]]; then
      after=$arg
      flagAfterSpecified=1
    else
      if [[ ! -f $arg ]]; then
        if [[ -e $arg ]]; then
          echo "refact: the specified path \`$arg' is not a regular file." >&2
        else
          echo "refact: the specified file \`$arg' does not exist." >&2
        fi
        flagError=1
      fi
      inputfiles[${#inputfiles[@]}]=$arg
    fi
  fi
done

if [[ $flagHelp ]]; then
  print_help
  [[ ! $flagError ]]
  exit
fi

[[ $flagBeforeSpecified && $flagAfterSpecified ]] || flagError=1

if [[ $flagError ]]; then
  usage_exit
  exit "$flagError"
fi

# for debug
# fB=
# before=Check
# after=_check

#------------------------------------------------------------------------------
# construct pattern

function upvar { unset "$1" && eval "$1=\"\$2\""; }

# 拡張正規表現文字クラスの文字順序
export LC_COLLATE=C

bpat="$before"
apat="$after"

# escape characters having special meanings in ERE.
function escape_regexchars {
  ret="$1"
  if [[ $ret == *['][\/^$.*+?{}()|']* ]]; then
    b=\] a='\]'; ret=${ret//"$b"/"$a"}
    b=\[ a='\['; ret=${ret//"$b"/"$a"}
    b=\\ a='\\'; ret=${ret//"$b"/"$a"}
    # b=\/ a='\/'; ret=${ret//"$b"/"$a"} # 後でエスケープされる
    b=\^ a='\^'; ret=${ret//"$b"/"$a"}
    b=\$ a='\$'; ret=${ret//"$b"/"$a"}
    b=\. a='\.'; ret=${ret//"$b"/"$a"}
    b=\* a='\*'; ret=${ret//"$b"/"$a"}
    b=\+ a='\+'; ret=${ret//"$b"/"$a"}
    b=\? a='\?'; ret=${ret//"$b"/"$a"}
    b=\{ a='\{'; ret=${ret//"$b"/"$a"}
    b=\} a='\}'; ret=${ret//"$b"/"$a"}
    b=\( a='\('; ret=${ret//"$b"/"$a"}
    b=\) a='\)'; ret=${ret//"$b"/"$a"}
    b=\| a='\|'; ret=${ret//"$b"/"$a"}
  fi
}

function escape_regexchars_in_replacement {
  local var=ret
  if [[ $1 == -v ]]; then
    var="$2"
    shift 2
  fi

  local a b text="$1"
  # 置換部分に含まれうる特別な文字: \1..\2\r\n\f\t\v\b\a &
  if [[ $text == *['][\/^$.*+?{}()|']* ]]; then
    b=\] a='\]'; text=${text//"$b"/"$a"}
    b=\[ a='\['; text=${text//"$b"/"$a"}
    # b=\\ a='\\'; text=${text//"$b"/"$a"}
    # b=\/ a='\/'; text=${text//"$b"/"$a"} # 後でエスケープされる
    b=\^ a='\^'; text=${text//"$b"/"$a"}
    b=\$ a='\$'; text=${text//"$b"/"$a"}
    b=\. a='\.'; text=${text//"$b"/"$a"}
    b=\* a='\*'; text=${text//"$b"/"$a"}
    b=\+ a='\+'; text=${text//"$b"/"$a"}
    b=\? a='\?'; text=${text//"$b"/"$a"}
    b=\{ a='\{'; text=${text//"$b"/"$a"}
    b=\} a='\}'; text=${text//"$b"/"$a"}
    b=\( a='\('; text=${text//"$b"/"$a"}
    b=\) a='\)'; text=${text//"$b"/"$a"}
    b=\| a='\|'; text=${text//"$b"/"$a"}
  fi

  local "$var" && upvar "$var" "$text"
}

if [[ $regex_type == F ]]; then
  declare ret
  escape_regexchars "$bpat"
  bpat="$ret"
fi

if [[ $fB ]]; then
  [[ $bpat =~ ^[_[:alnum:]] ]] && bpat='\b'"$bpat"
  [[ $bpat =~ [_[:alnum:]]$ ]] && bpat="$bpat"'\b'

  escape_regexchars_in_replacement -v apat "$apat"
  [[ $after =~ ^[_[:alnum:]] ]] && apat='\b'"$apat"
  [[ $after =~ [_[:alnum:]]$ ]] && apat="$apat"'\b'
fi

sl=/
esl='\/'
bpat_escaped="${bpat//$sl/$esl}"
after_escaped="${after//$sl/$esl}"

#echo "dbg: bpat=($bpat) apat=($apat)"

#------------------------------------------------------------------------------
# search pattern

target_files=()

echo --------- replace ---------

# time 0.672s
function enumerate_matches.i2 {
  exec 5>&1

  function search_target_files {
    # fd1 に一致ファイル一覧を出力
    # fd5 に一致箇所のレポートを出力

    local sgr_rls='\x1b[48;5;225m'
    local sgr_rws='\x1b[1;48;5;217m'
    local sgr_rwe='\x1b[22;48;5;225m'
    local sgr_als='\x1b[48;5;193m'
    local sgr_aws='\x1b[1;48;5;155m'
    local sgr_awe='\x1b[22;48;5;193m'
    local tab='\x1b[37m< TAB \/>\x1b[39m'
    local cr='\x1b[7m^M\x1b[27m'

    exec 6>&1
    grc --color "${grc_options[@]}" "$bpat" "${inputfiles[@]}" | gawk '
      {
        line=$0;
        gsub(/\x1b\[[ -?]*[@-~]/,"",line); # remove csi
        if(match(line,/^(([^:]|:[^0-9]|:[0-9]+[^:0-9])*):[0-9]+:/,m)>0){
          file=m[1];
          if(!target_files_dict[file]){
            target_files_dict[file]=1;
            print file > "/dev/fd/6";
            print ">>> " file;
          }
        }
        print $0;
      }
    ' | $GSED -r "
       /^>>> /{s/^>>> (.*)/\x1b[1m+++ \1\x1b[m/;p;d;}

       # h = header \n content
       s/\x1b\[[ -?]*[@-~]//g
       s/^(([^:]+|:+[0-9]*[^:0-9])*):+([0-9]+):(.*)$/\x1b[36m    \3:\x1b[m \n\4/
       s/ +([ 0-9]{5}:)/\1/
       /\n/!s/^/\n/
       h

       # p header - modify(content)
       g;s/[^\n]*\n//;s/${bpat_escaped}/$sgr_rws&$sgr_rwe/g;
       s/.*/$sgr_rls&\x1b[m/;
       s/\t/$tab/g;s/\r/$cr/g
       G;s/\n([^\n]*)$//;s/^(.*)\n([^\n]*)$/\2-\1/;p

       # p header + modify(content)
       g;s/[^\n]*\n//;s/${bpat_escaped}/$sgr_aws${after_escaped}$sgr_awe/g
       s/.*/$sgr_als&\x1b[m/;s/\n/\x1b[m&$sgr_als$sgr_aws/g;
       s/\t/$tab/g;s/\r/$cr/g
       :L
         G;s/\n([^\n]*)$//;s/^(.*)\n([^\n]*)$/\2+\1/;P
         /\n/!d
         s/^[^\n]*\n//
       bL
    " 1>&5
  }

  IFS=$'\n' eval 'result=($(search_target_files))'

  local file
  for file in "${result[@]}"; do
    test -f "$file" && target_files+=("$file")
  done
}

enumerate_matches.i2

if test "${#target_files[@]}" -le 0; then
  echo '---------------------------'
  echo "refact: pattern ($bpat) not found!" >&2
  exit 2
fi
if [[ $apat ]]; then
  echo '------- collision? --------'
  grc "${grc_options[@]}" "$apat" "${inputfiles[@]}"
fi
echo '---------------------------'

#------------------------------------------------------------------------------
# execute replace

mshex.yn -n "execute replace? " || exit 3

sedx="s/${bpat_escaped}/${after_escaped}/g"
if [[ $isGNUSed ]]; then
  # GNU sed
  $GSED -r -i "$sedx" "${target_files[@]}"
else
  # BSD sed
  sed -E -i '' "$sedx" "${target_files[@]}"
fi

#------------------------------------------------------------------------------
