#!/usr/bin/env bash

function mshex.yn {
  local prompt_yn='yes/no'
  local ret_default=
  case $1 in
  -y)
    ret_default=0
    prompt_yn='Yes/no'
    shift ;;
  -n)
    ret_default=1
    prompt_yn='yes/No'
    shift ;;
  esac

  while read -ep "$* ($prompt_yn): " line; do
    case "x${line,,}" in
    (xyes)
      return 0 ;;
    (xno)
      return 1 ;;
    (x)
      if [[ $ret_default ]]; then
        if ((ret_default == 0)); then
          echo "$* ($prompt_yn): yes"
        else
          echo "$* ($prompt_yn): no"
        fi
        return "$ret_default"
      fi ;;
    esac
  done
}

shopt -s extglob

GSED=sed
isGNUSed=1
if [[ $OSTYPE == @(darwin*|bsd*|solaris*) ]]; then
  if type gsed &>/dev/null; then
    GSED=gsed
  else
    isGNUSed=
  fi
fi

#------------------------------------------------------------------------------
# read arguments

function usage_exit {
  echo "usage: refact [options...] beforeExtendedRegex afterText [files...]" >&2
  exit 1
}
function print_help {
  ifold <<EOF
usage: refact [options...] [--] extended_regex after

OPTIONS

  --help        show this help

  -b, --word-boundary
  -B, --no-word-boundary
        set or reset the word-boundary condition.
        boundary is not set by default.

  -F, --fixed-strings

  --skip-collisions

  -Wg,GRCOPTIONS
        set options for grc
        GRCOPTIONS is the options for grc separated with comma.

EOF
}

## @var flags
##   E ... argument parse error
##   H ... show help
##   S ... literal option "--"
##   b ... matches the word boundaries
##   c ... check collisions
flags=

before=
after=
inputfiles=()

grc_options=(-U)
regex_type=E

function refact/read-arguments/error {
  echo "refact: $1" >&2
  flags=E$flags
}

function refact/read-arguments/option:W {
  case $1 in
  (g,?*)
    local arg=${1:2}
    IFS=, builtin eval 'grc_options+=($arg)' ;;
  (*)
    refact/read-arguments/error "unrecognized option '-W$1'" ;;
  esac
}

function refact/read-arguments {
  flags=c

  local -a words=()
  local iword=0
  while (($#)); do
    local arg=$1; shift
    if [[ $flags != *S* && $arg == -?* ]]; then
      if [[ $arg == --* ]]; then
        case $arg in
        (--word-boundary)    arg=-b ;;
        (--no-word-boundary) arg=-B ;;
        (--fixed-strings)    arg=-F ;;
        (--help)             flags=H$flags; continue ;;
        (--skip-collisions)  flags=${flags//c}; continue ;;
        (--) flags=S$flags; continue ;;
        (*)
          refact/read-arguments/error "unrecognized long option '$arg'."
          continue ;;
        esac
      fi

      arg=${arg:1}
      while [[ $arg ]]; do
        local c=${arg::1} arg=${arg:1}
        case $c in
        (b) flags=b$flags ;;
        (B) flags=${flags//b} ;;
        (F) regex_type=F ;;
        (W)
          if [[ ! $arg ]]; then
            if (($#==0)); then
              refact/read-arguments/error "missing option argument for '-$c'"
              break
            fi
            arg=$1; shift
          fi
          refact/read-arguments/option:"$c" "$arg"
          break ;;
        (*)
          refact/read-arguments/error "unrecognized option '-$c'." ;;
        esac
      done
    else
      words[iword++]=$arg
    fi
  done

  ((iword>=1)) || refact/read-arguments/error 'pattern is not specified.'
  ((iword>=2)) || refact/read-arguments/error 'refact: pattern is not specified.'
  before=${words[0]}
  after=${words[1]}

  local file
  for file in "${words[@]:2}"; do
    if [[ ! -f $file ]]; then
      if [[ -e $file ]]; then
        refact/read-arguments/error "the specified path \`$file' is not a regular file."
      else
        refact/read-arguments/error "the specified file \`$file' does not exist."
      fi
    fi
    inputfiles[${#inputfiles[@]}]=$file
  done

  if [[ $flags == *E* ]]; then
    usage_exit
    return 2
  fi
}

refact/read-arguments "$@" || exit 2

if [[ $flags == *H* ]]; then
  print_help
  exit 0
fi

# For debug
# flags=b
# before=Check
# after=_check

#------------------------------------------------------------------------------
# construct pattern

function upvar { unset "$1" && eval "$1=\"\$2\""; }

# 拡張正規表現文字クラスの文字順序
export LC_COLLATE=C

# escape characters having special meanings in ERE.
function escape_regexchars {
  ret="$1"
  if [[ $ret == *['][\/^$.*+?{}()|']* ]]; then
    b=\\ a='\\'; ret=${ret//"$b"/"$a"}
    b=\] a='\]'; ret=${ret//"$b"/"$a"}
    b=\[ a='\['; ret=${ret//"$b"/"$a"}
    # b=\/ a='\/'; ret=${ret//"$b"/"$a"} # 後でエスケープされる
    b=\^ a='\^'; ret=${ret//"$b"/"$a"}
    b=\$ a='\$'; ret=${ret//"$b"/"$a"}
    b=\. a='\.'; ret=${ret//"$b"/"$a"}
    b=\* a='\*'; ret=${ret//"$b"/"$a"}
    b=\+ a='\+'; ret=${ret//"$b"/"$a"}
    b=\? a='\?'; ret=${ret//"$b"/"$a"}
    b=\{ a='\{'; ret=${ret//"$b"/"$a"}
    b=\} a='\}'; ret=${ret//"$b"/"$a"}
    b=\( a='\('; ret=${ret//"$b"/"$a"}
    b=\) a='\)'; ret=${ret//"$b"/"$a"}
    b=\| a='\|'; ret=${ret//"$b"/"$a"}
  fi
}

function escape_regexchars_in_replacement {
  local var=ret
  if [[ $1 == -v ]]; then
    var=$2
    shift 2
  fi

  local a b text=$1
  # 置換部分に含まれうる特別な文字: \1..\2\r\n\f\t\v\b\a &
  if [[ $text == *['][\/^$.*+?{}()|']* ]]; then
    b=\\ a='\\'; text=${text//"$b"/"$a"}
    b=\] a='\]'; text=${text//"$b"/"$a"}
    b=\[ a='\['; text=${text//"$b"/"$a"}
    # b=\/ a='\/'; text=${text//"$b"/"$a"}
    b=\^ a='\^'; text=${text//"$b"/"$a"}
    b=\$ a='\$'; text=${text//"$b"/"$a"}
    b=\. a='\.'; text=${text//"$b"/"$a"}
    b=\* a='\*'; text=${text//"$b"/"$a"}
    b=\+ a='\+'; text=${text//"$b"/"$a"}
    b=\? a='\?'; text=${text//"$b"/"$a"}
    b=\{ a='\{'; text=${text//"$b"/"$a"}
    b=\} a='\}'; text=${text//"$b"/"$a"}
    b=\( a='\('; text=${text//"$b"/"$a"}
    b=\) a='\)'; text=${text//"$b"/"$a"}
    b=\| a='\|'; text=${text//"$b"/"$a"}
  fi

  local "$var" && upvar "$var" "$text"
}

bpat=$before
apat=$after
escape_regexchars_in_replacement -v apat "$apat"

if [[ $regex_type == F ]]; then
  declare ret
  escape_regexchars "$bpat"
  bpat=$ret
fi

if [[ $flags == *b* ]]; then
  [[ $bpat =~ ^[_[:alnum:]] ]] && bpat='\b'"$bpat"
  [[ $bpat =~ [_[:alnum:]]$ ]] && bpat="$bpat"'\b'

  [[ $after =~ ^[_[:alnum:]] ]] && apat='\b'"$apat"
  [[ $after =~ [_[:alnum:]]$ ]] && apat="$apat"'\b'
fi

sl=/
esl='\/'
bpat_escaped=${bpat//$sl/$esl}
after_escaped=${after//$sl/$esl}

#echo "dbg: bpat=($bpat) apat=($apat)"

#------------------------------------------------------------------------------
# search pattern

target_files=()

echo --------- replace ---------

# time 0.672s
function enumerate_matches.i2 {
  exec 5>&1

  function search_target_files {
    # fd1 に一致ファイル一覧を出力
    # fd5 に一致箇所のレポートを出力

    local sgr_rls='\x1b[38;5;16;48;5;225m'
    local sgr_rws='\x1b[38;5;16;1;48;5;217m'
    local sgr_rwe='\x1b[38;5;16;22;48;5;225m'
    local sgr_als='\x1b[38;5;16;48;5;193m'
    local sgr_aws='\x1b[38;5;16;1;48;5;155m'
    local sgr_awe='\x1b[38;5;16;22;48;5;193m'
    local tab='\x1b[37m< TAB \/>\x1b[39m'
    local cr='\x1b[7m^M\x1b[27m'

    grc --color=never "${grc_options[@]}" "$bpat" "${inputfiles[@]}" | gawk '
      {
        line = $0;
        if (match(line, /^(([^:]|:[^0-9]|:[0-9]+[^:0-9])*):[0-9]+:/, m) > 0) {
          file = m[1];
          if (!target_files_dict[file]) {
            target_files_dict[file] = 1;
            print ">>> " file;
          }
        }
        print $0;
      }
    ' | $GSED -r "
      /^>>> /{s/^>>> (.*)/\x1b[1m+++ \1\x1b[m/;p;d;}

      # h = header \n content
      s/^(([^:]+|:+[0-9]*[^:0-9])*):+([0-9]+):(.*)$/\x1b[36m    \3:\x1b[m \n\4/
      s/ +([ 0-9]{5}:)/\1/
      /\n/!s/^/\n/
      h

      # skip unchanged line
      g;s/[^\n]*\n//;s/${bpat_escaped}/${after_escaped}/g
      G;/^([^\n]*)\n[^\n]*\n\1$/d

      # p header - modify(content)
      g;s/[^\n]*\n//;s/${bpat_escaped}/$sgr_rws&$sgr_rwe/g;
      s/.*/$sgr_rls&\x1b[m/;
      s/\t/$tab/g;s/\r/$cr/g
      G;s/\n([^\n]*)$//;s/^(.*)\n([^\n]*)$/\2-\1/;p

      # p header + modify(content)
      g;s/[^\n]*\n//;s/${bpat_escaped}/$sgr_aws${after_escaped}$sgr_awe/g
      s/.*/$sgr_als&\x1b[m/;s/\n/\x1b[m&$sgr_als$sgr_aws/g;
      s/\t/$tab/g;s/\r/$cr/g
      :L
        G;s/\n([^\n]*)$//;s/^(.*)\n([^\n]*)$/\2+\1/;P
        /\n/!d
        s/^[^\n]*\n//
      bL
    " | gawk '
      {
        line = $0;
        gsub(/\x1b\[[ -?]*[@-~]/, "", line);
        if (line ~ /^\+{3} /) {
          fileline = $0;
          filename = substr(line, 5);
        } else {
          if (filename) {
            print filename;
            print fileline > "/dev/fd/5";
            filename = "";
          }
          print $0 > "/dev/fd/5";
        }
      }
    '
  }

  IFS=$'\n' builtin eval 'result=($(search_target_files))'

  local file
  for file in "${result[@]}"; do
    [[ -f $file ]] && target_files+=("$file")
  done
}

enumerate_matches.i2

if ((${#target_files[@]} <= 0)); then
  echo '---------------------------'
  echo "refact: pattern ($bpat) not found!" >&2
  exit 1
fi
if [[ $apat && $flags == *c* ]]; then
  echo '------- collision? --------'
  grc --color=auto "${grc_options[@]}" "$apat" "${inputfiles[@]}"
fi
echo '---------------------------'

#------------------------------------------------------------------------------
# execute replace

mshex.yn -n "execute replace? " || exit 3

sedx=s/${bpat_escaped}/${after_escaped}/g
if [[ $isGNUSed ]]; then
  # GNU sed
  $GSED -r -i "$sedx" "${target_files[@]}"
else
  # BSD sed
  sed -E -i '' "$sedx" "${target_files[@]}"
fi

#------------------------------------------------------------------------------
