#!/bin/bash

# settings

dir="$HOME/.recycle"

#------------------------------------------------------------------------------
# utils

shopt -s nullglob

# >>>>> yn.sh
#%include "../functions/yn.sh"
# <<<<< yn.sh

function upvar { unset "$1" && eval "$1=\"\$2\""; }

path_separator_pattern='[/\\]'
function escape_filename {
  if [[ $1 == -v ]]; then
    eval "
      $2=\"\$3\"
      $2=\"\${$2//%/%25}\"
      $2=\"\${$2//\$path_separator_pattern/%2F}\"
    "
  else
    local _value
    escape_filename -v _value "$1"
    echo "$_value"
  fi
}
function unescape_filename {
  local var=
  if [[ $1 == -v ]]; then
    var="$2"
    shift 2
  fi

  local value="$1"
  value="${value//%2F/'/'}"
  value="${value//%25/%}"

  if [[ $var ]]; then
    local "$var" && upvar "$var" "$value"
  else
    echo "$value"
  fi
}

#------------------------------------------------------------------------------

function show-help {
  ifold <<EOF
usage: remove [options] file...

OPTIONS

  -?, --help
        show this help

  -r, --recursive

  -i, --interactive[=always]
        prompt before every removal
  -I, --interactive=once
        list removed files and prompt once.

  -f, --force
  -v, --verbose

  -s

EOF
}

function subcommand:list-garbages {
  [[ -d $dir/wait ]] || return
  local entry
  local date time rtime file wdir
  for entry in $dir/wait/*; do
    [[ -e $entry ]] || continue
    entry="${entry#"$dir/wait/"}"

    if [[ $entry == ????????-??????-* ]]; then
      date="${entry::8}"
      time="${entry:9:6}"
      file="${entry:16}"

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      unescape_filename -v file "$file"
      echo "$rtime $file"
    elif [[ $entry == ????????-??????@* ]]; then
      date="${entry::8}"
      time="${entry:9:6}"
      wdir="${entry:16}"

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      unescape_filename -v wdir "$wdir"

      echo "$rtime $wdir"
      for file in "$dir/wait/$entry"/*; do
        file="${file#"$dir/wait/$entry"/}"
        unescape_filename -v file "$file"
        echo "${rtime//?/ }  \__ $file"
      done
    else
      echo unknown entry
    fi
  done
}

#------------------------------------------------------------------------------
# read options
fR=
fI=
fF=
fV=
fS=

fDone=
fHelp=
fError=
files=()

while (($#)); do
  declare arg="$1" i
  shift
  case "$arg" in
  (--help)          fHelp=1 ;;
  (--recursive)     fR=1 ;;
  (--force)         fF=1 ;;
  (--verbose)       fV=1 ;;
  (--interactive)   fI=always ;;
  (--interactive=*) fI=${arg#--interactive=}
                    : ${fI:=always}
                    [[ $fI == none ]] && fI=
                    ;;
  (--*)
    fError=1
    echo "mshex/remove: unrecognized option \`$arg'." >&2 ;;
  (-?*)
    for ((i=1;i<${#arg};i++)); do
      case "${arg:i:1}" in
      (i) fI=always ;;
      (I) fI=once   ;;
      (r) fR=1  ;;
      (f) fF=1  ;;
      (v) fV=-v ;;
      (s) fS=1  ;;
      (l) subcommand:list-garbages
          fDone="$?" ;;
      (*)
        fError=1
        echo "mshex/remove: unrecognized option \`-${arg:i:1}'" >&2 ;;
      esac
    done ;;
  (*)
    files[${#files[@]}]="$arg" ;;
  esac
done

if [[ $fHelp ]]; then
  show-help
  [[ ! $fError ]]
  exit
fi

[[ $fDone ]] && exit "$fDone"

if ((${#files[@]}==0)); then
  echo "mshex/remove: no files to remove are specified" >&2
  exit 1
fi

# checking files
if [[ ! $fR || ! $fF ]]; then
  declare file
  for file in "${files[@]}"; do
    if [[ ! $fF && ! ( -e $file || -h $file ) ]]; then
      echo "mshex/remove: '$file' does not exist!" >&2
      exit 1
    elif [[ ! $fR && -d $file && ! -h $file ]]; then
      echo "mshex/remove: '$file' is directory! (use -r option to remove directory)" >&2
      exit 1
    fi
  done
fi

[[ $fError ]] && exit 1

#------------------------------------------------------------------------------
# create backup directory
mkd () { test -d "$1" || mkdir -p "$1"; }
now="$(date +%Y%m%d-%H%M%S)"

delete_waiting_files () {
  [[ -d $dir/wait ]] || return

  local -a gomigomi=()
  for file in "$dir"/wait/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]*; do
    local date="${file#$dir/wait/}"
    date="${date:0:8}"
    if ((date+100<${now::8})); then
      gomigomi[${#gomigomi[@]}]="$file"
    fi
  done

  if ((${#gomigomi[@]}>0)); then
    mkd "$dir/gomi"
    mv $fV "${gomigomi[@]}" "$dir/gomi/"
  fi
}

delete_waiting_files

destination="$dir/wait"
[[ $fS ]] && destination="$dir"
mkd "$destination"

if [[ $fI == once ]]; then
  {
    echo '-- filelist --'
    find -- "${files[@]%/}"
  } | less -XSF

  mshex.yn -n "mshex/remove: remove the above files?" || exit 2
  fI=
fi

function interactive_confirm_file {
  local file="$1"
  [[ ! $fI ]] && return 0

  local ft='an unknown-type file'
  if [[ -d $file ]]; then
    ft='a directory'
  elif [[ -p $file ]]; then
    ft='a named pipe'
  elif [[ -b $file ]]; then
    ft='a block device'
  elif [[ -s $file ]]; then
    ft='a socket'
  elif [[ -h $file ]]; then
    ft='a symbolic link'
  elif [[ -f $file ]]; then
    if [[ ! -s $file ]]; then
      ft='an empty file'
    elif [[ -x $file ]]; then
      ft='an executable file'
    else
      ft='a regular file'
    fi
  fi

  mshex.yn "mshex/remove: $ft '$file'?"
}

## @var[in] destination
## @var[in] now
## @var[in] files[]
function remove_impl {
  if ((${#files[@]}==1)); then
    local src="${files[0]%/}" dst esc
    interactive_confirm_file "$src" || return
    escape_filename -v esc "$PWD/$src"
    dst="$destination/$now-$esc"
    while [[ -e $dst ]]; do dst="$dst+"; done
    mv $fV -- "$src" "$dst"
  elif ((${#files[@]}>=2)); then
    local dst esc

    # prepare dst directory
    escape_filename -v esc "$PWD"
    dst="$destination/$now@$esc"
    while [[ -e $dst ]]; do dst="$dst+"; done
    mkdir "$dst"

    local file
    local -a raws=()
    for file in "${files[@]}"; do
      interactive_confirm_file "$file" || continue
      escape_filename -v esc "$file"
      if [[ $esc != "$file" ]]; then
        mv $fV -- "$file" "$dst/$esc"
      else
        raws[${#raws[@]}]="$file"
      fi
    done
    ((${#raws[@]})) && mv $fV -- "${raws[@]}" "$dst"/
  fi
}

remove_impl
