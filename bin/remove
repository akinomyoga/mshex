#!/usr/bin/env bash

REMOVE_DIR_NAME=.recycle
REMOVE_SUBDIR_WAIT=recent
REMOVE_SUBDIR_GOMI=old

: ${VISUAL:=less}
[[ ${VISUAL##*/} == less ]] && VISUAL=("$VISUAL" -XSFr)

#------------------------------------------------------------------------------
# utils

((__bash=BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100+BASH_VERSINFO[2]))

shopt -s nullglob

mkd() { [[ -d $1 ]] || mkdir -p "$1"; }

# < yn.sh >
#%include "../functions/yn.sh"
# </ yn.sh >

function upvar { unset "$1" && eval "$1=\$2"; }

function escape_filename {
  local var=
  if [[ $1 == -v ]]; then
    var=$2
    shift 2
  fi

  local value=$1 path_sep='\/'
  value=${value//'%'/'%25'}
  value=${value//["$path_sep"]/'%2F'}

  if [[ $var ]]; then
    local "$var" && upvar "$var" "$value"
  else
    echo "$value"
  fi
}

function unescape_filename {
  local var=
  if [[ $1 == -v ]]; then
    var=$2
    shift 2
  fi

  local value=$1
  value=${value//'%2F'/'/'}
  value=${value//'%25'/'%'}

  if [[ $var ]]; then
    local "$var" && upvar "$var" "$value"
  else
    echo "$value"
  fi
}

if ((__bash>=30100)); then
  function array#push {
    local __script='A+=("${@:2}")'
    __script=${__script//A/"$1"}
    builtin eval -- "$__script"
  }
else
  function array#push {
    local __script='local vA;for vA in "${@:2}";do A[${#A[@]}]=$vA; done'
    __script=${__script//A/"$1"}
    builtin eval -- "$__script"
  }
fi

#------------------------------------------------------------------------------
# migrate

function recycle#migrate {
  local recycle=$1
  local wait_dir=$recycle/recent
  local gomi_dir=$recycle/old

  # 古い形式のディレクトリ
  if [[ -d $recycle/wait ]]; then
    if [[ -d $wait_dir ]]; then
      mv "$recycle/wait"/* "$wait_dir"/
      rmdir "$recycle/wait"
    else
      mv "$recycle/wait" "$wait_dir"
    fi
  fi
  if [[ -d $recycle/gomi ]]; then
    if [[ -d $gomi_dir ]]; then
      mv "$recycle/gomi"/* "$gomi_dir"/
      rmdir "$recycle/gomi"
    else
      mv "$recycle/gomi" "$gomi_dir"
    fi
  fi
}

function subcommand:add-recycle {
  local home flags= recycles
  recycles=()
  for home; do
    if [[ ! -d $home ]]; then
      flags=E$flags
      if [[ -e $home || -L $home ]]; then
        printf '%s\n' "$home: this is not a directory." >&2
      else
        printf '%s\n' "$home: the directory does not exist." >&2
      fi
      continue
    elif [[ ! -O $home ]]; then
      flags=E$flags
      printf '%s\n' "$home: the directory is not owned by the current user." >&2
      continue
    elif [[ ! -w $home ]]; then
      flags=E$flags
      printf '%s\n' "$home: the directory is not writable." >&2
      continue
    fi

    local recycle=$home/$REMOVE_DIR_NAME
    if [[ -e $recycle || -L $recycle ]]; then
      flags=E$flags
      printf '%s\n' "$home/$REMOVE_DIR_NAME: the file already exists." >&2
      continue
    fi

    array#push recycles "$recycle"
  done
  [[ $flags == *E* ]] && return 2
  mkd "${recycles[@]}"
}

_remove_base=
function recycle#resolve {
  local home=${HOME%/}
  local path=$(cd -P .; printf '%sx' "${PWD}")
  path=${path%x} path=${path%/}

  while [[ $path != "$home" ]]; do
    local base=$path/$REMOVE_DIR_NAME
    if [[ -d $base && -O $base ]]; then
      if ! [[ -r $base && -w $base ]]; then
        printf '%s\n' "$base: directory permission is wrong." >&2
        exit 1
      fi
      _remove_base=$base
      break
    fi

    [[ $path == */* ]] || break
    path=${path%/*}
  done

  [[ $_remove_base ]] || _remove_base=$home/$REMOVE_DIR_NAME

  _remove_base_wait=$_remove_base/$REMOVE_SUBDIR_WAIT
  _remove_base_gomi=$_remove_base/$REMOVE_SUBDIR_GOMI
  recycle#migrate "$_remove_base"
}

#------------------------------------------------------------------------------

function subcommand:error {
  return 1
}

function subcommand:help {
  local bold cyan red sgr0 ul
  if [[ $iscolor ]]; then
    bold=$'\e[1m'
    cyan=$'\e[36m'
    red=$'\e[91m'
    sgr39=$'\e[39m'
    sgr0=$'\e[m'
    ul=$'\e[4m'
  fi

  ifold -s -i <<EOF
usage: ${bold}remove${sgr0} ${red}[${cyan}OPTIONS${red}]${sgr0} ${cyan}FILE${sgr0}...

  Remove files in a safe way.

${bold}FILE${sgr0}

  Specify files and directories to remove. To remove directories, the \`${ul}-r${sgr0}' option is required. \
The removed files and directories are saved in ${ul}\$HOME/.recycle/recent${sgr0} or in the local ${ul}.recycle${sgr0} directory.

${bold}OPTIONS${sgr0}

  ${bold}-?, --help${sgr0}
        Show this help
  ${bold}-l, --list-garbages${sgr0}
        List files removed within a month.
  ${bold}    --flush-old${sgr0}
        Completely delete files removed before a month ago.
  ${bold}    --add-recycle${sgr0}
        Create local recycle directories under the paths specified by ${cyan}FILE${sgr0}.

  ${bold}    --color${red}[${sgr39}=always${red}]${sgr0}
  ${bold}    --color=auto${sgr0}
  ${bold}    --color=none${sgr0}
        specify the color mode of the output. \
When \`${ul}always${sgr0}' is specified, the output is always colored using terminal control sequences. \
When \`${ul}auto${sgr0}' is specified, the output is colored if it is connected to terminal. When \`${ul}none${sgr0}' is specified, the output is not colored. \
If the value is omitted as \`${ul}--color${sgr0}', the color mode becomes \`${ul}always${sgr0}'. \
The default color mode is \`${ul}auto${sgr0}'.

  ${bold}-r, --recursive${sgr0}
        Search files to remove recursively
  ${bold}-b, --remove-backup${sgr0}
        Remove also backup files

  ${bold}-i, --interactive${red}[${sgr39}=always${red}]${sgr0}
        Prompt before every removal
  ${bold}-I, --interactive=once${sgr0}
        List removed files and prompt once.

  ${bold}-f, --force${sgr0}
  ${bold}-v, --verbose${sgr0}

  ${bold}-s${sgr0}

EOF
}

a_dir=$'\e[94m'
a_link=$'\e[96m'
a_pipe=$'\e[40;94m'
a_sock=$'\e[40;96m'
a_char=$'\e[40;97m'
a_block=$'\e[40;93m'
a_exec=$'\e[92m'
a_stick=$'\e[32;41m'
a_file=$'\e[m'
E_miss=$'\e[91m'
E_ovwrt=$'\e[1;30m'
sgr0=$'\e[m'

function subcommand:list-garbages/color-filename {
  _file=$file
  if [[ $iscolor ]]; then
    if [[ -d $gfile ]]; then
      _file=$a_dir$file$sgr0
    elif [[ -h $gfile ]]; then
      _file=$a_link$file$sgr0
    elif [[ -p $gfile ]]; then
      _file=$a_pipe$file$sgr0
    elif [[ -S $gfile ]]; then
      _file=$a_sock$file$sgr0
    elif [[ -b $gfile ]]; then
      _file=$a_block$file$sgr0
    elif [[ -x $gfile ]]; then
      if [[ -k $gfile ]]; then
        _file=$a_stick$file$sgr0
      else
        _file=$a_exec$file$sgr0
      fi
    else
      _file=$a_file$file$sgr0
    fi
  fi
}

function subcommand:list-garbages/color-directory {
  _wdir=$wdir
  if [[ $iscolor ]]; then
    if [[ -d $wdir ]]; then
      _wdir=$a_dir$wdir$sgr0
    else
      _wdir=$E_miss$wdir$sgr0
    fi
  fi
}

function subcommand:list-garbages/check-newfile {
  if [[ -e $1 ]]; then
    if [[ $iscolor ]]; then
      _file="$_file $E_ovwrt*$sgr0"
    else
      _file="$_file *"
    fi
  fi
}

function subcommand:list-garbages {
  recycle#resolve
  if [[ $_remove_base != "${HOME%/}/$REMOVE_DIR_NAME" ]]; then
    printf '%s\n' "# local .recycle directory '$_remove_base' is used"
  fi
  [[ -d $_remove_base_wait ]] || return 0
  local entry
  local date time gfile wdir
  local rtime file opath
  local _wdir _file
  for entry in "$_remove_base_wait"/*; do
    [[ -e $entry ]] || continue
    entry=${entry#"$_remove_base_wait/"}

    if [[ $entry == ????????-??????-* ]]; then
      date=${entry::8}
      time=${entry:9:6}
      gfile=$_remove_base_wait/$entry
      file=${entry:16}
      unescape_filename -v file "$file"

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      subcommand:list-garbages/color-filename
      subcommand:list-garbages/check-newfile "$file"
      echo "$rtime $_file"
    elif [[ $entry == ????????-??????@* ]]; then
      date=${entry::8}
      time=${entry:9:6}
      wdir=${entry:16}
      unescape_filename -v wdir "$wdir"
      [[ -d $wdir ]] && local wdir_exists=1

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      subcommand:list-garbages/color-directory
      echo "$rtime $_wdir"

      for gfile in "$_remove_base_wait/$entry"/{*,.*}; do
        file=${gfile#"$_remove_base_wait/$entry"/}
        [[ $file == . || $file == .. ]] && continue
        unescape_filename -v file "$file"

        subcommand:list-garbages/color-filename
        [[ $wdir_exists ]] && subcommand:list-garbages/check-newfile "$wdir/$file"
        echo "${rtime//?/ }  \__ $_file"
      done
    else
      echo unknown entry
    fi
  done | less -SFXR
}

function subcommand:flush-old {
  recycle#resolve
  rm -rf "$_remove_base_gomi"
}

#------------------------------------------------------------------------------
# read options
fR=
fI=
fF=
fV=
fS=
fBackup= # remove-backup

fColor=auto

subcommand=
function readargs/set:subcommand {
  if [[ $subcommand ]]; then
    echo "mshex/remove:(arg:$arg -> $subcommand): multiple subcommands are specified." >&2
    subcommand=error
  else
    subcommand=$1
  fi
}

fLiteral=
fError=
files=()

if (($#==0)); then
  readargs/set:subcommand list-garbages
fi

while (($#)); do
  declare arg=$1 i
  shift

  if [[ $fLiteral || $arg != -* ]]; then
    files[${#files[@]}]=$arg
  else
    case "$arg" in
    (--help)          readargs/set:subcommand help ;;
    (--recursive)     fR=1 ;;
    (--force)         fF=1 ;;
    (--verbose)       fV=1 ;;
    (--interactive)   fI=always ;;
    (--interactive=*) fI=${arg#*=}
                      : ${fI:=always}
                      [[ $fI == none ]] && fI= ;;
    (--color)         fColor=always ;;
    (--color=*)       fColor=${arg#*=}
                      : ${fColor:=always} ;;
    (--list-garbages) readargs/set:subcommand list-garbages ;;
    (--remove-backup) fBackup=1 ;;
    (--) fLiteral=1 ;;
    (--flush-old)     readargs/set:subcommand flush-old ;;
    (--add-recycle)   readargs/set:subcommand add-recycle ;;
    (--*)
      fError=1
      echo "mshex/remove: unrecognized option \`$arg'." >&2 ;;
    (-?*)
      for ((i=1;i<${#arg};i++)); do
        case "${arg:i:1}" in
        ('?') readargs/set:subcommand help ;;
        (i) fI=always ;;
        (I) fI=once   ;;
        (r) fR=1  ;;
        (f) fF=1  ;;
        (v) fV=-v ;;
        (s) fS=1  ;;
        (b) fBackup=1 ;;
        (l) readargs/set:subcommand list-garbages ;;
        (*)
          fError=1
          echo "mshex/remove: unrecognized option \`-${arg:i:1}'" >&2 ;;
        esac
      done ;;
    esac
  fi
done

[[ $fError ]] && exit 1

iscolor=
if [[ $fColor == always || $fColor == auto && -t 1 ]]; then
  iscolor=1
fi

if [[ $subcommand ]]; then
  subcommand:"$subcommand" "${files[@]}"
  exit
fi

function register_backup_files {
  local index file backup_file backup_files
  backup_files=()
  for index in "${!files[@]}"; do
    file=${files[index]}
    local backup_file=$file~
    if [[ -f $backup_file ]]; then
      backup_files[${#backup_files[@]}]=$backup_file

      # 2022-11-23 If backup file is found but the main file is not found, we
      # skip the removing of the main file.
      [[ -e $file || -L $file ]] || unset -v 'files[index]'
    fi
  done
  files=("${files[@]}" "${backup_files[@]}")
}

function check_files_are_removable_files {
  local file
  for file in "${files[@]}"; do
    if [[ ! $fF && ! ( -e $file || -h $file ) ]]; then
      echo "mshex/remove: '$file' does not exist!" >&2
      exit 1
    elif [[ ! $fR && -d $file && ! -h $file ]]; then
      echo "mshex/remove: '$file' is directory! (use -r option to remove directory)" >&2
      exit 1
    fi
  done
}

function check_files_are_on_the_same_disk {
  local root_synonym=
  if [[ $OSTYPE == cygwin* ]]; then
    root_synonym=$(df / | awk 'NR==2 && /^[A-Z]:/ {print "/cygdrive/" tolower(substr($1,1,1));}')
  fi

  mkd "$_remove_base"
  local result=$(
    export root_synonym

    # シンボリックリンクがリンク先のディレクトリに解決されるのを防ぐ
    dffiles=()
    for file in "${files[@]}"; do
      if [[ -h $file || -p $file || -s $file || -b $file || -c $file || -S $file ]]; then
        if [[ $file == */* ]]; then
          file=${file%/*}/
        else
          file=.
        fi
      fi
      dffiles[${#dffiles[@]}]=$file
    done

    { df -- "$_remove_base" "${dffiles[@]}" | awk '
      BEGIN {root_synonym = ENVIRON["root_synonym"];}
      function normalize(path){return path == root_synonym? "/": path;}
      NR==2{mount_point=normalize($NF);next;}
      NR>=3 && normalize($NF) != mount_point {print "odisk=" (NR-3);}'; } 2>&1)
  if [[ $result ]]; then
    # print error messages
    local line
    while read -r line; do
      if [[ $line == odisk=* ]]; then
        local index=${line%odist=}
        echo "mshex/remove: '${files[index]}' is on a different disk from that of the recycle directory"
        echo "mshex/remove: Please consider creating a local .recycle directory in the top-level user directory in the disk (cf --help)."
      else
        echo "$line"
      fi
    done <<< "$result" >&2
    exit 1
  fi
}

#------------------------------------------------------------------------------
# create backup directory

## @fn delete_waiting_files
##   @var now
function delete_waiting_files {
  [[ -d $_remove_base_wait ]] || return

  local -a gomigomi=()
  for file in "$_remove_base_wait"/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]*; do
    local date=${file#$_remove_base_wait/}
    date=${date::8}
    if ((date+100<${now::8})); then
      gomigomi[${#gomigomi[@]}]=$file
    fi
  done

  if ((${#gomigomi[@]}>0)); then
    mkd "$_remove_base_gomi"
    mv $fV "${gomigomi[@]}" "$_remove_base_gomi"
  fi
}

function interactive_confirm_file {
  local file=$1
  [[ ! $fI ]] && return 0

  local ft='an unknown-type file'
  if [[ -d $file ]]; then
    ft='a directory'
  elif [[ -p $file ]]; then
    ft='a named pipe'
  elif [[ -b $file ]]; then
    ft='a block device'
  elif [[ -s $file ]]; then
    ft='a socket'
  elif [[ -h $file ]]; then
    ft='a symbolic link'
  elif [[ -f $file ]]; then
    if [[ ! -s $file ]]; then
      ft='an empty file'
    elif [[ -x $file ]]; then
      ft='an executable file'
    else
      ft='a regular file'
    fi
  fi

  mshex.yn "mshex/remove: $ft '$file'?"
}

## @var[in] destination
## @var[in] now
## @var[in] files[]
function subcommand:remove {
  local -a files; files=("$@")
  if ((${#files[@]}==0)); then
    echo "mshex/remove: no files to remove are specified" >&2
    return 1
  fi

  recycle#resolve
  if [[ $fBackup ]]; then
    register_backup_files
  fi

  # checking files
  if [[ ! $fR || ! $fF ]]; then
    check_files_are_removable_files
    check_files_are_on_the_same_disk
  fi

  local now=$(date +%Y%m%d-%H%M%S)

  delete_waiting_files

  destination=$_remove_base_wait
  [[ $fS ]] && destination=$_remove_base
  mkd "$destination"

  if [[ $fI == once ]]; then
    {
      echo '-- filelist --'
      if type colored &>/dev/null; then
        colored ls -ld "${files[@]%/}"
      else
        ls -ld "${files[@]%/}"
      fi
    } | "${VISUAL[@]}"

    mshex.yn -n "mshex/remove: remove the above files?" || exit 2
    fI=
  fi

  if ((${#files[@]}==1)); then
    local src=${files[0]%/} dst esc
    interactive_confirm_file "$src" || return
    escape_filename -v esc "$PWD/$src"
    dst=$destination/$now-$esc
    while [[ -e $dst ]]; do dst=$dst+; done
    mv $fV -- "$src" "$dst"
  elif ((${#files[@]}>=2)); then
    local dst esc

    # prepare dst directory
    escape_filename -v esc "$PWD"
    dst=$destination/$now@$esc
    while [[ -e $dst ]]; do dst=$dst+; done
    mkdir "$dst"

    local file
    local -a raws=()
    for file in "${files[@]}"; do
      interactive_confirm_file "$file" || continue
      escape_filename -v esc "$file"
      if [[ $esc != "$file" ]]; then
        mv $fV -- "$file" "$dst/$esc"
      else
        raws[${#raws[@]}]=$file
      fi
    done
    ((${#raws[@]})) && mv $fV -- "${raws[@]}" "$dst"/
  fi
}

subcommand:remove "${files[@]}"
