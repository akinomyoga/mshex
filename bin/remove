#!/bin/bash

# settings

dir="$HOME/.recycle"

: ${VISUAL:=less}
[[ ${VISUAL##*/} == less ]] && VISUAL=("$VISUAL" -XSF)

#------------------------------------------------------------------------------
# utils

shopt -s nullglob

mkd () { test -d "$1" || mkdir -p "$1"; }

# < yn.sh >
#%include "../functions/yn.sh"
# </ yn.sh >

function upvar { unset "$1" && eval "$1=\"\$2\""; }

path_separator_pattern='[/\\]'
function escape_filename {
  local var=
  if [[ $1 == -v ]]; then
    var="$2"
    shift 2
  fi

  local value="$1"
  value="${value//%/%25}"
  value="${value//$path_separator_pattern/%2F}"

  if [[ $var ]]; then
    local "$var" && upvar "$var" "$value"
  else
    echo "$value"
  fi
}

function unescape_filename {
  local var=
  if [[ $1 == -v ]]; then
    var="$2"
    shift 2
  fi

  local value="$1"
  value="${value//%2F/'/'}"
  value="${value//%25/%}"

  if [[ $var ]]; then
    local "$var" && upvar "$var" "$value"
  else
    echo "$value"
  fi
}

#------------------------------------------------------------------------------

function subcommand:error {
  return 1
}

function subcommand:help {
  local bold cyan red sgr0 ul
  if [[ $iscolor ]]; then
    bold=$'\e[1m'
    cyan=$'\e[36m'
    red=$'\e[91m'
    sgr39=$'\e[39m'
    sgr0=$'\e[m'
    ul=$'\e[4m'
  fi

  ifold -s -i <<EOF
usage: ${bold}remove${sgr0} ${red}[${cyan}OPTIONS${red}]${sgr0} ${cyan}FILE${sgr0}...

  remove files in a safe way.

${bold}FILE${sgr0}

  Specify files and directories to remove. To remove directories, the \`${ul}-r${sgr0}' option is required. \
The removed files and directories are saved in ${ul}\$HOME/.recycle/wait${sgr0}.

${bold}OPTIONS${sgr0}

  ${bold}-l, --list-garbages${sgr0}

  ${bold}    --color${red}[${sgr39}=always${red}]${sgr0}
  ${bold}    --color=auto${sgr0}
  ${bold}    --color=none${sgr0}
        specify the color mode of the output. \
When \`${ul}always${sgr0}' is specified, the output is always colored using terminal control sequences. \
When \`${ul}auto${sgr0}' is specified, the output is colored if it is connected to terminal. When \`${ul}none${sgr0}' is specified, the output is not colored. \
If the value is omitted as \`${ul}--color${sgr0}', the color mode becomes \`${ul}always${sgr0}'. \
The default color mode is \`${ul}auto${sgr0}'.

  ${bold}-?, --help${sgr0}
        show this help

  ${bold}-r, --recursive${sgr0}

  ${bold}-i, --interactive${red}[${sgr39}=always${red}]${sgr0}
        prompt before every removal
  ${bold}-I, --interactive=once${sgr0}
        list removed files and prompt once.

  ${bold}-f, --force${sgr0}
  ${bold}-v, --verbose${sgr0}

  ${bold}-s${sgr0}

EOF
}

a_dir=$'\e[94m'
a_link=$'\e[96m'
a_pipe=$'\e[40;94m'
a_sock=$'\e[40;96m'
a_char=$'\e[40;97m'
a_block=$'\e[40;93m'
a_exec=$'\e[92m'
a_stick=$'\e[32;41m'
a_file=$'\e[m'
E_miss=$'\e[91m'
E_ovwrt=$'\e[1;30m'
sgr0=$'\e[m'

function subcommand:list-garbages/color-filename {
  _file="$file"
  if [[ $iscolor ]]; then
    if [[ -d $gfile ]]; then
      _file="$a_dir$file$sgr0"
    elif [[ -h $gfile ]]; then
      _file="$a_link$file$sgr0"
    elif [[ -p $gfile ]]; then
      _file="$a_pipe$file$sgr0"
    elif [[ -S $gfile ]]; then
      _file="$a_sock$file$sgr0"
    elif [[ -b $gfile ]]; then
      _file="$a_block$file$sgr0"
    elif [[ -x $gfile ]]; then
      if [[ -k $gfile ]]; then
        _file="$a_stick$file$sgr0"
      else
        _file="$a_exec$file$sgr0"
      fi
    else
      _file="$a_file$file$sgr0"
    fi
  fi
}

function subcommand:list-garbages/color-directory {
  _wdir="$wdir"
  if [[ $iscolor ]]; then
    if [[ -d $wdir ]]; then
      _wdir="$a_dir$wdir$sgr0"
    else
      _wdir="$E_miss$wdir$sgr0"
    fi
  fi
}

function subcommand:list-garbages/check-newfile {
  if [[ -e $1 ]]; then
    if [[ $iscolor ]]; then
      _file="$_file $E_ovwrt*$sgr0"
    else
      _file="$_file *"
    fi
  fi
}

function subcommand:list-garbages {
  [[ -d $dir/wait ]] || return
  local entry
  local date time gfile wdir
  local rtime file opath
  local _wdir _file
  for entry in $dir/wait/*; do
    [[ -e $entry ]] || continue
    entry="${entry#"$dir/wait/"}"

    if [[ $entry == ????????-??????-* ]]; then
      date="${entry::8}"
      time="${entry:9:6}"
      gfile="$dir/wait/$entry"
      file="${entry:16}"
      unescape_filename -v file "$file"

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      subcommand:list-garbages/color-filename
      subcommand:list-garbages/check-newfile "$file"
      echo "$rtime $_file"
    elif [[ $entry == ????????-??????@* ]]; then
      date="${entry::8}"
      time="${entry:9:6}"
      wdir="${entry:16}"
      unescape_filename -v wdir "$wdir"
      [[ -d $wdir ]] && local wdir_exists=1

      rtime="${date::4}-${date:4:2}-${date:6} ${time::2}:${time:2:2}:${time:4}"
      subcommand:list-garbages/color-directory
      echo "$rtime $_wdir"

      for gfile in "$dir/wait/$entry"/{*,.*}; do
        file="${gfile#"$dir/wait/$entry"/}"
        [[ $file == . || $file == .. ]] && continue
        unescape_filename -v file "$file"

        subcommand:list-garbages/color-filename
        [[ $wdir_exists ]] && subcommand:list-garbages/check-newfile "$wdir/$file"
        echo "${rtime//?/ }  \__ $_file"
      done
    else
      echo unknown entry
    fi
  done | less -SFXR
}

#------------------------------------------------------------------------------
# read options
fR=
fI=
fF=
fV=
fS=

fColor=auto

subcommand=
function subcommand.set {
  if [[ $subcommand ]]; then
    echo "mshex/remove:(arg:$arg -> $subcommand): multiple subcommands are specified." >&2
    subcommand=error
  else
    subcommand="$1"
  fi
}

fError=
files=()

while (($#)); do
  declare arg="$1" i
  shift
  case "$arg" in
  (--help)          subcommand.set help ;;
  (--recursive)     fR=1 ;;
  (--force)         fF=1 ;;
  (--verbose)       fV=1 ;;
  (--interactive)   fI=always ;;
  (--interactive=*) fI=${arg#*=}
                    : ${fI:=always}
                    [[ $fI == none ]] && fI=
                    ;;
  (--color)         fColor=always ;;
  (--color=*)       fColor=${arg#*=}
                    : ${fColor:=always} ;;
  (--list-garbages) subcommand.set list-garbages ;;
  (--*)
    fError=1
    echo "mshex/remove: unrecognized option \`$arg'." >&2 ;;
  (-?*)
    for ((i=1;i<${#arg};i++)); do
      case "${arg:i:1}" in
      ('?') subcommand.set help ;;
      (i) fI=always ;;
      (I) fI=once   ;;
      (r) fR=1  ;;
      (f) fF=1  ;;
      (v) fV=-v ;;
      (s) fS=1  ;;
      (l) subcommand.set list-garbages ;;
      (*)
        fError=1
        echo "mshex/remove: unrecognized option \`-${arg:i:1}'" >&2 ;;
      esac
    done ;;
  (*)
    files[${#files[@]}]="$arg" ;;
  esac
done

[[ $fError ]] && exit 1

iscolor=
if [[ $fColor == always || $fColor == auto && -t 1 ]]; then
  iscolor=1
fi

if [[ $subcommand ]]; then
  [[ ! $fError ]] && subcommand:"$subcommand" "${files[@]}"
  exit
fi

if ((${#files[@]}==0)); then
  echo "mshex/remove: no files to remove are specified" >&2
  exit 1
fi

function check_files_are_removable_files {
  local file
  for file in "${files[@]}"; do
    if [[ ! $fF && ! ( -e $file || -h $file ) ]]; then
      echo "mshex/remove: '$file' does not exist!" >&2
      exit 1
    elif [[ ! $fR && -d $file && ! -h $file ]]; then
      echo "mshex/remove: '$file' is directory! (use -r option to remove directory)" >&2
      exit 1
    fi
  done
}

function check_files_are_on_the_same_disk {
  mkd "$dir"
  local result=$({ df "$dir" "${files[@]}" | awk '
    NR==2{mount_point=$NF;next;}
    NR>=3 && $NF != mount_point {print "odisk=" (NR-3);}'; } 2>&1)
  if [[ $result ]]; then
    # print error messages
    local line
    while read -r line; do
      if [[ $line == odisk=* ]]; then
        local index=${line%odist=}
        echo "mshex/remove: '${files[index]}' is on a different disk from that of the recycle directory"
      else
        echo "$line"
      fi
    done <<< "$result" >&2
    exit 1
  fi
}

# checking files
if [[ ! $fR || ! $fF ]]; then
  check_files_are_removable_files
  check_files_are_on_the_same_disk
fi

#------------------------------------------------------------------------------
# create backup directory
now="$(date +%Y%m%d-%H%M%S)"

delete_waiting_files () {
  [[ -d $dir/wait ]] || return

  local -a gomigomi=()
  for file in "$dir"/wait/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]*; do
    local date="${file#$dir/wait/}"
    date="${date:0:8}"
    if ((date+100<${now::8})); then
      gomigomi[${#gomigomi[@]}]="$file"
    fi
  done

  if ((${#gomigomi[@]}>0)); then
    mkd "$dir/gomi"
    mv $fV "${gomigomi[@]}" "$dir/gomi/"
  fi
}

delete_waiting_files

destination="$dir/wait"
[[ $fS ]] && destination="$dir"
mkd "$destination"

if [[ $fI == once ]]; then
  {
    echo '-- filelist --'
    find -- "${files[@]%/}"
  } | "${VISUAL[@]}"

  mshex.yn -n "mshex/remove: remove the above files?" || exit 2
  fI=
fi

function interactive_confirm_file {
  local file="$1"
  [[ ! $fI ]] && return 0

  local ft='an unknown-type file'
  if [[ -d $file ]]; then
    ft='a directory'
  elif [[ -p $file ]]; then
    ft='a named pipe'
  elif [[ -b $file ]]; then
    ft='a block device'
  elif [[ -s $file ]]; then
    ft='a socket'
  elif [[ -h $file ]]; then
    ft='a symbolic link'
  elif [[ -f $file ]]; then
    if [[ ! -s $file ]]; then
      ft='an empty file'
    elif [[ -x $file ]]; then
      ft='an executable file'
    else
      ft='a regular file'
    fi
  fi

  mshex.yn "mshex/remove: $ft '$file'?"
}

## @var[in] destination
## @var[in] now
## @var[in] files[]
function remove_impl {
  if ((${#files[@]}==1)); then
    local src="${files[0]%/}" dst esc
    interactive_confirm_file "$src" || return
    escape_filename -v esc "$PWD/$src"
    dst="$destination/$now-$esc"
    while [[ -e $dst ]]; do dst="$dst+"; done
    mv $fV -- "$src" "$dst"
  elif ((${#files[@]}>=2)); then
    local dst esc

    # prepare dst directory
    escape_filename -v esc "$PWD"
    dst="$destination/$now@$esc"
    while [[ -e $dst ]]; do dst="$dst+"; done
    mkdir "$dst"

    local file
    local -a raws=()
    for file in "${files[@]}"; do
      interactive_confirm_file "$file" || continue
      escape_filename -v esc "$file"
      if [[ $esc != "$file" ]]; then
        mv $fV -- "$file" "$dst/$esc"
      else
        raws[${#raws[@]}]="$file"
      fi
    done
    ((${#raws[@]})) && mv $fV -- "${raws[@]}" "$dst"/
  fi
}

remove_impl
