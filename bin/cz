#!/usr/bin/env bash

function openssl/encrypt {
  if [[ $2 == *.cz ]]; then
    openssl enc -e -des3 -md md5 "${@:3}" -in "$1" -out "$2"
  else
    openssl enc -e -aes-256-cbc -md sha512 -pbkdf2 -iter 1000 -salt "${@:3}" -in "$1" -out "$2"
  fi
}
function openssl/decrypt {
  if [[ $1 == *.cz ]]; then
    openssl enc -d -des3 -md md5 "${@:3}" -in "$1" -out "$2"
  else
    openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 1000 -salt "${@:3}" -in "$1" -out "$2"
  fi
}

function rmbk {
  local file=$1
  local out=${1%.*}.$(date +%Y%m%d-%H%M%S)
  local ext=.${1##*.}
  [[ $ext == . ]] && ext=

  while [[ -e $out$ext ]]; do
    out=$out+
  done

  mv "$file" "$out$ext"
}

function cz/edit {
  local in=$1 opts=$2
  if [[ $1 != *.cz && $1 != *.cz2 ]]; then
    echo 'cz: the input file for --edit should be *.cz or *.cz2.' >&2
    return 2
  fi
  local tmp=${1%.*} out=${1%.*}.cz2

  local p=
  if [[ -e $in ]]; then
    if [[ -e $tmp && -s $tmp ]]; then
      echo "cz: the file \"$tmp\" already exists." >&2
      return 2
    fi

    if ! { [[ -t 0 ]] && read -r -e -p "(passphrase for $in) "$'\e[37;47;97;107;8m' p; }; then
      echo "cz: failed to read passphrase." >&2
      return 2
    fi
    printf $'\e[m'

    if ! openssl/decrypt "$in" /dev/stdout -pass pass:"$p" | xz -d - > "$tmp"; then
      echo "cz: failed to decrypt the file \"$in\"!" >&2
      /bin/rm "$tmp"
      return 2
    fi

    if [[ ! -s $tmp ]]; then
      echo "cz: failed to decrypt the file \"$in\"!" >&2
      return 2
    fi

    rmbk "$in"
  else
    [[ -e $tmp ]] || touch "$tmp"
  fi

  # 編集
  if ! ${EDITOR:-emacs} "$tmp"; then
    echo "cz: failed to edit the file \"$tmp\"!" >&2
    [[ -e $in ]] && /bin/rm "$tmp"
    return 2
  fi

  # 暗号化
  if ! xz -c "$tmp" | openssl/encrypt /dev/stdin "$out" ${p:+-pass pass:"$p"}; then
    echo "cz: failed to encrypt the file \"$tmp\"!" >&2
    return 2
  elif [[ ! -s $out ]]; then
    echo "cz: failed to encrypt the file \"$tmp\"!" >&2
    return 2
  fi

  /bin/rm -f "$tmp"
  if [[ :$opts: != *:preserve-backup:* && -f $tmp~ ]]; then
    /bin/rm -f "$tmp~"
  fi

  return 0
}

function cz/encrypt1 {
  local in=$1 out=$2

  if [[ -e $out ]]; then
    echo "output file already exists!" >&2
    return 1
  fi

  if ! xz -c "$in" | openssl/encrypt /dev/stdin "$out"; then
    echo 'failed to encrypt!' >&2
    return 1
  fi

  if [[ ! -s $out ]]; then
    echo 'failed to encrypt!' >&2
    return 1
  fi

  /bin/rm -f "$in"
  if [[ :$arg_opts: != *:preserve-backup:* && -f $in~ ]]; then
    /bin/rm -f "$in~"
  fi
  return 0
}

function cz/decrypt1 {
  local in=$1 out=$2

  if [[ -e $out ]]; then
    echo "output file already exists!" >&2
    return 1
  fi

  if ! openssl/decrypt "$in" /dev/stdout | xz -d - > "$out"; then
    echo 'failed to decrypt!' >&2
    /bin/rm "$out"
    return 1
  fi

  if [[ ! -s $out ]]; then
    echo 'failed to decrypt!' >&2
    return 1
  fi

  rmbk "$in"
  return 0
}

function readargs/help {
  printf '%s\n' \
         'usage: cz [options] inputfile' \
         '' \
         '  --edit     Edit the file' \
         '  -c, --cat  Print decrypted contents to stdout keeping the file' \
         '  -b         Preserve backup file (file~)' \
         '  --help     Print this help' \
         ''
}

## @fn read_arguments args...
##   @var[out] flags
##   @var[out] arg_opts
##   @var[out] input_filename
function read_arguments {
  flags= arg_opts= input_filename=
  while (($#)); do
    local arg=$1; shift
    case "$arg" in
    (--help) flags=H$flags ;;
    (--edit) arg_opts=$arg_opts:edit ;;
    (-c|--cat) arg_opts=$arg_opts:cat ;;
    (-b)
      # don't remove the backup file
      arg_opts=$arg_opts:preserve-backup ;;
    (-*) flags=E$flags
         echo "cz: unknown option $arg" >&2 ;;
    ('') flags=E$flags
         echo "cz: an empty argument is specified" >&2 ;;
    (*)
      if [[ $input_filename ]]; then
        flags=E$flags
        echo "cz: input filename is already specified" >&2
        continue
      fi

      input_filename=$arg
      if [[ ! -f $input_filename ]]; then
        flags=E$flags
        echo "cz: the file \"$input_filename\" does not exist!" >&2
        continue
      fi ;;
    esac
  done

  if [[ $flags == *H* ]]; then
    readargs/help
  elif [[ ! $input_filename ]]; then
    flags=E$flags
    echo "inputfile is not specified!" >&2
  fi

  [[ $flags != *E* ]]
}

flags= arg_opts= input_filename=
read_arguments "$@" || exit 2
[[ $flags == *H* ]] && exit 0

if [[ :$arg_opts: == *:edit:* ]]; then
  cz/edit "$input_filename" "$arg_opts"
elif [[ :$arg_opts: == *:cat:* ]]; then
  openssl/decrypt "$input_filename" /dev/stdout | xz -d -
elif [[ $input_filename == *.cz || $input_filename == *.cz2 ]]; then
  cz/decrypt1 "$input_filename" "${input_filename%.*}"
else
  cz/encrypt1 "$input_filename" "$input_filename.cz2"
fi
