#!/bin/bash

#--------------------------------------
# utils

# from ble.sh
_ble_bash=$((BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100+BASH_VERSINFO[2]))
if ((_ble_bash>=30200)); then
  function ble/is-function {
    builtin declare -F "$1" &>/dev/null
  }
else
  function ble/is-function {
    [[ $(type -t "$1" 2>/dev/null) == function ]]
  }
fi

function pat2regex {
  # (|){}^$ 等は意味を保持する (ファイル名に用いられそうにないから)
  local pat="$1"
  pat="${pat//+/\\+}"
  pat="${pat//./\\.}"
  pat="${pat//'?'/[^/]}"
  pat="${pat//'**'/.*}"
  pat="${pat//'*'/[^/]*}"
  regex="$pat"
  # echo dbg: pat2regex $regex >&2
}

#--------------------------------------
# options

fArgumentError=

# find
fALL=
findRegex=()
fNoExtension= # not implemented
extensions=()

# excludes
excludesDotFiles=1
excludesBackup=1
excludedPatterns=()

# types
typeSpecified=

function option/extension {
  while (($#)); do
    local arg="$1"; shift
    local rex='^:|::|:$|^$'
    [[ "$arg" =~ $rex ]] && fNoExtension=1

    IFS=: eval 'local arr=($arg) ext'
    for ext in "${arr[@]}"; do
      [[ $ext ]] && extensions+=("${ext#.}")
    done
  done
}

function option/check-optarg1 {
  if (($#==0)); then
    fArgumentError=1
    echo "${title:-findsrc}: missing option argument for option -$c." >&2
    return 1
  fi
}

function option/type {
  option/check-optarg1 "$@" || return 1

  local type="$1"
  if ble/is-function "option/type:$type"; then
    typeSpecified=1
    "option/type:$type"
  else
    fArgumentError=1
    echo "${title:-findsrc}: unknown type = '$type'."
  fi
}

function option/type:c {
  option/extension c:h
}
function option/type:c++ {
  option/type:c
  option/extension inl:cpp:cxx:hpp:hxx:cc:C
  local cxx_headers=(
    cassert cctype cerrno cfenv cfloat cinttypes ciso646 climits clocale
    cmath csetjmp csignal cstdarg cstdbool cstddef cstdint cstdio cstdlib
    cstring ctgmath ctime cuchar cwchar cwctype array bitset deque
    forward_list list map queue set stack unordered_map unordered_set
    vector atomic condition_variable future mutex thread algorithm chrono
    codecvt complex exception functional initializer_list iterator limits
    locale memory new numeric random ratio regex stdexcept string
    system_error tuple typeindex typeinfo type_traits utility valarray
  )
  local rex
  IFS='|' eval 'rex="(.*/|^)(${cxx_headers[*]})"'
  findRegex+=("$rex")
}
function option/type:js  { option/extension js:css; }
function option/type:f   { option/extension f:inc; }
function option/type:el  { option/extension el; }
function option/type:sh  { option/extension sh:src; }
function option/type:awk { option/extension awk; }
function option/type:py  { option/extension py; }
function option/type:rb  { option/extension rb; }
function option/type:pl  { option/extension pl; }
function option/type:plain { :; }
function option/type:all { fALL=1; }

function read_arguments {
  while (($#)); do
    local arg="$1" option="$1"
    shift
    case "$arg" in
    (-[^-]*)
      local i iN="${#arg}"
      for ((i=1;i<iN;i++)); do
        local c="${arg:i:1}"
        local option="-$c"
        case "$option" in
        (-t) option/type "$@"; shift ;;
        (-x) option/extension "$1"; shift ;;
        (-a) excludesDotFiles=  ;;
        (-A) excludesDotFiles=1 ;;
        (-b) excludesBackup=    ;;
        (-B) excludesBackup=1   ;;
        (-*)
          echo "${title:-findsrc}: unknown option ($option)" >&2
          fArgumentError=1 ;;
        esac
      done
      ;;
    (--help)
      ifold -s -i -w 80 <<EOF
findsrc [options...] [type...]

OPTIONS

  --help

  -t, --type=TYPE
        c c++ js f el sh plain all

  -x, --extension=EXTENSIONS
        Specify the extension to be included. \
Multiple extensions separated by colons can be specified.

  --exclude=PATTERN

  -A    exclude dotfiles (default).
  -a    include dotfiles.
  -B    exclude backup files (default).
  -b    include backup files.

EOF
      exit 0 ;;
    (--type=*)      option/type "${arg#*=}" ;;
    (--extension=*) option/extension "${arg#*=}" ;;
    (--exclude=*)   excludedPatterns+=("${arg#*=}") ;;
    (-|--*)
      echo "${title:-findsrc}: unknown option ($option)" >&2
      fArgumentError=1 ;;
    (*)
      local regex
      pat2regex "$arg"
      findRegex+=("(.*/)?$regex") ;;
    esac
  done
}

function read_arguments_from_dotfile {
  local dir="$PWD"
  while
    local foption="$dir/.srcoption"
    [[ ! -f "$foption" ]]
  do
    [[ ! $dir || $dir == "${dir%/*}" ]] && return
    dir="${dir%/*}"
  done

  local title line rex='(^|[ 	])#.+$' iline=0 args=
  while IFS= read -r line || [[ $line ]]; do
    ((iline++))
    [[ $line =~ $rex ]] && line=${line::${#line}-${#BASH_REMATCH}}
    [[ ! ${line//[ 	]} ]] && continue
    eval "args=($line)"
    title="$foption:$iline" read_arguments "${args[@]}"
  done < "$foption"
}

read_arguments_from_dotfile
read_arguments "$@"

[[ $fArgumentError ]] && exit 1

if [[ ! $typeSpecified ]]; then
  option/type:c++
  option/type:js
  option/type:f
  option/type:el
  option/type:sh
  option/type:awk
  option/type:py
  option/type:rb
  option/type:pl
fi

# egrep -v の引数を構築
function rex_grep.construct {
  rex_grep=('^$')

  if [[ $excludesBackup ]]; then
    rex_grep+=('/backup/|\.[[:digit:]]{8}($|\.\w+)|~$')
    [[ $fALL ]] && rex_grep+=('~$')
  fi

  if [[ $excludesDotFiles ]]; then
    rex_grep+=('/\.[^/]')
  fi

  for ((i=0;i<${#excludedPatterns[*]};i++)); do
    local regex
    pat2regex "${excludedPatterns[i]}"
    rex_grep+=("(^|/)$regex(/|$)")
  done

  IFS='|' eval 'rex_grep="${rex_grep[*]}"'
}
rex_grep.construct

# 実行
if [[ $fALL ]]; then
  find | \grep -Ev "$rex_grep" | sort
else
  declare rex
  IFS='|' eval 'rex=".*[^/]\.(${extensions[*]})"'
  findRegex+=("$rex")

  [[ $fNoExtension ]] && findRegex+=("(.*/)?[^/.]+")

  declare rex_find
  IFS='|' eval 'rex_find="${findRegex[*]}"'

  # echo "rex_find=$rex_find" >&2
  # echo "rex_grep=$rex_grep" >&2
  
  # 処理系によって正規表現が異なる (因みに -regex option は非 POSIX 標準の様だ)
  find -regextype posix-extended -type f -and -regex "$rex_find" | \grep -Ev "$rex_grep" | sort
  # find -regex '..*\.\('"${rex_extensions//|/\\|}"'\)'|egrep -v '/backup/|\.[[:digit:]]{8}\.\w+' | sort
fi
