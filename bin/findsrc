#!/bin/bash

fNoExtension=
extensions=()

function add_extensions {
  [[ "$1" =~ ^:|::|:$ ]] && fNoExtension=1

  IFS=: eval 'local arr=($1) ext'
  for ext in "${arr[@]}"; do
    test -n "$ext" && extensions+=("${ext#.}")
  done
}

function pat2regex {
  # (|){}^$ 等は意味を保持する (ファイル名に用いられそうにないから)
  local pat="$1"
  pat="${pat//+/\\+}"
  pat="${pat//./\\.}"
  pat="${pat//?/.}"
  pat="${pat//*/.*}"
  regex="$pat"
}

excludesDotFiles=1
excludesBackup=1
excludedPatterns=()

typeSpecified=
typeC=
typeJs=
typeF=
typeEl=
typeSh=
typeAll=

while (($#)); do
  case "$1" in
  (-x)
    add_extensions "$2"
    shift 2 ;;
  (-x*)
    add_extensions "${1:2}"
    shift ;;
  (-a) # do not exclude dotfiles
    excludesDotFiles=
    shift ;;
  (-b) # do not exclude backups
    excludesBackup=
    shift ;;
  (--exclude=*)
    excludedPatterns+=("${1#--exclude=}")
    shift ;;
  (-*)
    echo "findsrc: uknown option ($1)" >&2
    exit 2 ;;
  (c|'c++')
    typeSpecified=1 typeC=1
    shift ;;
  (js)
    typeSpecified=1 typeJs=1
    shift ;;
  (f)
    typeSpecified=1 typeF=1
    shift ;;
  (el)
    typeSpecified=1 typeEl=1
    shift ;;
  (sh)
    typeSpecified=1 typeSh=1
    shift ;;
  (all)
    typeSpecified=1 typeAll=1
    shift ;;
  (*)
    echo "findsrc: unrecognized type '$1'" >&2
    exit 1 ;;
  esac
done

[[ $typeC   || -z $typeSpecified ]] && extensions+=(c h inl cpp cxx hpp hxx)
[[ $typeJs  || -z $typeSpecified ]] && extensions+=(js ctx css)
[[ $typeF   || -z $typeSpecified ]] && extensions+=(f inc)
[[ $typeEl  || -z $typeSpecified ]] && extensions+=(el)
[[ $typeSh  || -z $typeSpecified ]] && extensions+=(sh src)
[[ $typeAll ]] && fALL=1 extensions+=(all)

# egrep -v の引数を構築
function grepv_excludes.construct {
  grepv_excludes=('^$')

  if [[ $excludesBackup ]]; then
    grepv_excludes+=('/backup/|\.[[:digit:]]{8}($|\.\w+)')
    [[ $fALL ]] && grepv_excludes+=('~$')
  fi

  if [[ $excludesDotFiles ]]; then
    grepv_excludes+=('/\.[^/]')
  fi

  for ((i=0;i<${#excludedPatterns[*]};i++)); do
    local regex
    pat2regex "${excludedPatterns[i]}"
    grepv_excludes+=("$regex")
  done

  IFS='|' eval 'grepv_excludes="${grepv_excludes[*]}"'
}
grepv_excludes.construct

# 実行
if test -n "$fALL"; then
  find | \egrep -v "$grepv_excludes"
else
  IFS='|' eval 'rex_extensions="${extensions[*]}"'

  # 処理系によって正規表現が異なる (因みに -regex option は非 POSIX 標準の様だ)
  find -regextype posix-extended -regex '.+\.('"$rex_extensions"')'| \egrep -v "$grepv_excludes"
  # find -regex '..*\.\('"${rex_extensions//|/\\|}"'\)'|egrep -v '/backup/|\.[[:digit:]]{8}\.\w+'
fi
