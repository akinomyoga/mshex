#!/usr/bin/env bash

#--------------------------------------
# utils

# from ble.sh
_ble_bash=$((BASH_VERSINFO[0]*10000+BASH_VERSINFO[1]*100+BASH_VERSINFO[2]))
if ((_ble_bash>=30200)); then
  function ble/is-function {
    builtin declare -F "$1" &>/dev/null
  }
else
  function ble/is-function {
    [[ $(type -t "$1" 2>/dev/null) == function ]]
  }
fi

if ((_ble_bash>=30100)); then
  function ble/array#push { IFS=' ' builtin eval -- "$1+=(\"\${@:2}\")"; }
else
  function ble/array#push {
    while (($#>=2)); do
      builtin eval -- "$1[\${#$1[@]}]=\"\$2\""
      set -- "$1" "${@:3}"
    done
  }
fi

function pat2regex {
  # (|){}^$ 等は意味を保持する (ファイル名に用いられそうにないから)
  local pat=$1
  pat=${pat//+/\\+}
  pat=${pat//./\\.}
  pat=${pat//'?'/[^/]}
  pat=${pat//'**'/.*}
  pat=${pat//'*'/[^/]*}
  regex=$pat
  # echo dbg: pat2regex $regex >&2
}

#------------------------------------------------------------------------------
# options

function option/extension {
  while (($#)); do
    local arg=$1; shift
    local rex='^:|::|:$|^$'
    [[ $arg =~ $rex ]] && opts=$opts:find-extenstionless

    local ext
    IFS=: builtin eval 'local -a arr=($arg)'
    for ext in "${arr[@]}"; do
      [[ $ext ]] && opt_find_extensions+=("${ext#.}")
    done
  done
}

function option/check-optarg1 {
  if (($#==0)); then
    flags=E$flags
    echo "${title:-findsrc}: missing option argument for option -$c." >&2
    return 1
  fi
}

function option/type {
  option/check-optarg1 "$@" || return 1

  local type=$1
  if ble/is-function "option/type:$type"; then
    flags=T$flags
    "option/type:$type"
  else
    flags=E$flags
    echo "${title:-findsrc}: unknown type = '$type'."
  fi
}

function option/type:c {
  option/extension c:h
}
function option/type:c++ {
  option/type:c
  option/extension inl:cpp:cxx:hpp:hxx:cc:C
  local cxx_headers=(
    cassert cctype cerrno cfenv cfloat cinttypes ciso646 climits clocale
    cmath csetjmp csignal cstdarg cstdbool cstddef cstdint cstdio cstdlib
    cstring ctgmath ctime cuchar cwchar cwctype array bitset deque
    forward_list list map queue set stack unordered_map unordered_set
    vector atomic condition_variable future mutex thread algorithm chrono
    codecvt complex exception functional initializer_list iterator limits
    locale memory new numeric random ratio regex stdexcept string
    system_error tuple typeindex typeinfo type_traits utility valarray
  )
  local rex
  IFS='|' builtin eval 'rex="(.*/|^)(${cxx_headers[*]})"'
  opt_find_regex+=("$rex")
}
function option/type:js  { option/extension js:css; }
function option/type:f   { option/extension f:inc; }
function option/type:el  { option/extension el; }
function option/type:sh  { option/extension sh:src:bash:zsh:fish; }
function option/type:awk { option/extension awk; }
function option/type:py  { option/extension py; }
function option/type:rb  { option/extension rb; }
function option/type:pl  { option/extension pl; }
function option/type:plain { :; }
function option/type:all { opts=$opts:find-all-files; }

function readargs/process {
  while (($#)); do
    local arg=$1 option=$1
    shift
    case "$arg" in
    (-[^-]*)
      local i iN=${#arg}
      for ((i=1;i<iN;i++)); do
        local c=${arg:i:1}
        local option=-$c
        case "$option" in
        (-t) option/type "$@"; shift ;;
        (-x) option/extension "$1"; shift ;;
        (-a) flags=a$flags     ;;
        (-A) flags=${flags//a} ;;
        (-b) flags=b$flags     ;;
        (-B) flags=${flags//b} ;;
        (-*)
          echo "${title:-findsrc}: unknown option ($option)" >&2
          flags=E$flags ;;
        esac
      done
      ;;
    (--include-dotfile) flags=a$flags     ;;
    (--exclude-dotfile) flags=${flags//a} ;;
    (--include-backup)  flags=b$flags     ;;
    (--exclude-backup)  flags=${flags//b} ;;
    (--help)
      ifold -s -i -w 80 <<EOF
findsrc [options...] [type...]

OPTIONS

  --help

  -t, --type=TYPE
        c c++ js f el sh plain all

  -x, --extension=EXTENSIONS
        Specify the extension to be included. \
Multiple extensions separated by colons can be specified.

  --exclude=PATTERN

  -A, --exclude-dotfile   exclude dotfiles (default).
  -a, --exclude-dotfile   include dotfiles.
  -B, --exclude-backup    exclude backup files (default).
  -b, --exclude-backup    include backup files.

EOF
      exit 0 ;;
    (--type=*)      option/type "${arg#*=}" ;;
    (--extension=*) option/extension "${arg#*=}" ;;
    (--exclude=*)   opt_exclude_glob+=("${arg#*=}") ;;
    (-|--*)
      echo "${title:-findsrc}: unknown option ($option)" >&2
      flags=E$flags ;;
    (*)
      local regex
      pat2regex "$arg"
      opt_find_regex+=("(.*/|^)$regex\$") ;;
    esac
  done
}

function readargs/load_dotfile {
  local dir=$PWD
  while
    local foption=$dir/.srcoption
    [[ ! -f $foption ]]
  do
    [[ ! $dir || $dir == "${dir%/*}" ]] && return
    dir=${dir%/*}
  done

  local title line rex='(^|[ 	])#.+$' iline=0 args=
  while IFS= read -r line || [[ $line ]]; do
    ((iline++))
    [[ $line =~ $rex ]] && line=${line::${#line}-${#BASH_REMATCH}}
    [[ ! ${line//[ 	]} ]] && continue
    set -f
    eval "args=($line)"
    set +f
    title=$foption:$iline readargs/process "${args[@]}"
  done < "$foption"
}

function readargs {
  opts= flags=
  opt_find_extensions=()
  opt_find_regex=()
  opt_exclude_glob=()

  # 2022-02-27 find のオプションで exlcude まで処理する実装に切り替えた。
  # 然し後で問題が生じるかもしれないので、取り敢えずは grep による実装も
  # 残してある。grep による制限もかける場合には以下のオプションを使用す
  # る。
  #opts=$opts:use-grep-to-exclude

  readargs/load_dotfile
  readargs/process "$@"

  [[ $flags == *E* ]] && return 2

  if [[ $flags != *T* ]]; then
    option/type:c++
    option/type:js
    option/type:f
    option/type:el
    option/type:sh
    option/type:awk
    option/type:py
    option/type:rb
    option/type:pl
  fi
}

#------------------------------------------------------------------------------

function main {
  local opts flags
  local -a opt_exclude_glob
  readargs "$@" || return 2

  local -a find_options=()

  # 処理系によって正規表現が異なる (因みに -regex option は非 POSIX 標準の様だ)
  if [[ $OSTYPE == darwin* || $OSTYPE == freebsd* || $OSTYPE == bsd* ]]; then
    ble/array#push find_options -E
  else
    ble/array#push find_options -regextype posix-extended
  fi

  # exclude
  local -a exclude=()
  if [[ $flags != *b* ]]; then
    ((${#exclude[@]})) && ble/array#push exclude -o
    ble/array#push exclude -regex '^.*/backup/.*$|^.*(\.[0-9]{8}(\.[_a-zA-Z0-9]+)?|~)$'
  fi
  if [[ $flags != *a* ]]; then
    ((${#exclude[@]})) && ble/array#push exclude -o
    ble/array#push exclude -regex '^.*/\.[^/].*$'
  fi
  local pat
  for pat in "${opt_exclude_glob[@]}"; do
    ((${#exclude[@]})) && ble/array#push exclude -o
    case $pat in
    (./*)  ble/array#push exclude -path "$pat" ;;
    ( */*) ble/array#push exclude -path "$pat" -o -path "*/$pat" ;;
    (*)    ble/array#push exclude -name "$pat" ;;
    esac
  done
  ((${#exclude[@]})) &&
    ble/array#push find_options \( "${exclude[@]}" \) -prune -o

  # search target
  if [[ :$opts: != *:find-all-files:* ]]; then
    local rex
    IFS='|' builtin eval 'rex="^.*[^/]\.(${opt_find_extensions[*]})\$"'
    opt_find_regex+=("$rex")

    [[ :$opts: == *:find-extenstionless:* ]] && opt_find_regex+=("^(.*/)?[^/.]+\$")

    local rex_find
    IFS='|' builtin eval 'rex_find="${opt_find_regex[*]}"'
    
    ble/array#push find_options \( -type f -and -regex "$rex_find" \)
  fi

  # 実行
  #echo find . "${find_options[@]}" -print 1>&2
  find . "${find_options[@]}" -print 2>/dev/null | {
    if [[ :$opts: == *:use-grep-to-exclude:* ]]; then
      local rex_grep
      rex_grep.construct
      rex_grep=('^$')

      if [[ $flags != *b* ]]; then
        rex_grep+=('/backup/|\.[0-9]{8}(\.[_a-zA-Z0-9]+)?$|~$')
      fi
      if [[ $flags != *a* ]]; then
        rex_grep+=('/\.[^/]')
      fi
      local exclude regex
      for exclude in "${opt_exclude_glob[@]}"; do
        pat2regex "$exclude"
        rex_grep+=("(^|/)$regex(/|$)")
      done

      IFS='|' builtin eval 'rex_grep="${rex_grep[*]}"'

      \grep -Ev "$rex_grep" | sort
    else
      sort
    fi
  }
}

main "$@"
