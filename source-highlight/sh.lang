preproc = "import"

#number = '(?<=-)([[:digit:]]+)'

include "number.lang"

normal = '\\[\\"\'`$]'

#------------------------------------------------------------------------------
# comment
#   comment character # should be the first character of a word.
comment start '(?:^|(?<=[[:blank:];|&<>()]))#'

#------------------------------------------------------------------------------
# string literals
#   strings in shell scripts are completely different from those in C language.

environment string delim "`" "`" multiline begin
  specialchar = '\\["$`\\]'
end

environment string delim '\$?"' '"' multiline begin
  specialchar = '\\["$`\\]'
  include "bash_simple_expansion.lang"
end

environment string delim '\$\'' '\'' multiline begin
  specialchar = '\\[abeEfnrtv\\\'"]|\\c.|\\U[0-9a-fA-F]{1,8}|\\u[0-9a-fA-F]{1,4}|\\x[0-9a-fA-F]{1,2}|\\[0-7]{1,3}'
end

# single quoted string cannot contain escape characters
string delim '\'' '\'' multiline

#------------------------------------------------------------------------------
# function definition

(keyword,normal,function) = `(\bfunction)([[:blank:]]+)([^;&|<>()"'\`$[:blank:]]+(?=[[:blank:]]*(?:\(\))?))`
function = '([^;&|<>()"\'`$[:blank:]=]+(?=[[:blank:]]*\(\)))'

#------------------------------------------------------------------------------
# ?
#   avoids, in things such as --bind, that words are highlighted as keywords
normal = '([[:alpha:]]*[-/]+[[:alpha:]]+)+'

(keyword,normal,variable,normal,keyword) = `(\bfor)([[:blank:]]+)([_[:alpha:]][[:word:]]*)([[:blank:]]+)(in\b)`

keyword = '\bin\b'
keyword = '\b(?:case|do|done|elif|else|esac|fi|for|if|select|then|until|while)\b'

#------------------------------------------------------------------------------
# builtin commands

predef_func = '\b(?:alias|bg|bind|break|builtin|caller|cd|command|compgen)\b',
          '\b(?:complete|compopt|continue|declare|dirs|disown|echo|enable)\b',
          '\b(?:eval|exec|exit|export|false|fc|fg|getopts|hash|help)\b',
          '\b(?:history|jobs|kill|let|local|logout|mapfile|popd|printf)\b',
          '\b(?:pushd|pwd|read|readarray|readonly|return|set|shift|shopt)\b',
          '\b(?:source|suspend|test|times|trap|true|type|typeset|ulimit)\b',
          '\b(?:umask|unalias|unset|wait)\b'

predef_func = '(?:^|(?<=[[:blank:];&|<>()]))([.:])(?=[[:blank:];&|<>()]|$)'
# predef_func = '\['

#------------------------------------------------------------------------------

# it is considered a variable if there's a =, which is discarded anyway
variable = '\b[_[:alpha:]][[:word:]]*(?=\+?=)'

# ${var...}
state (symbol,variable) = `(\$\{)([#!]?[_[:alpha:]][[:word:]]*|[-*@#?$!0]|[1-9][0-9]*)` begin
  symbol = '\}' exit
  include "bash_simple_expansion.lang"
end

# $var
(symbol,variable) = `(\$)([_[:alpha:]][[:word:]]*|[-*@#?$!0]|[1-9][0-9]*)`

# $( ... )
#(symbol,normal,symbol) = `(\$\()([^[:blank:]]+)(\))`
#state symbol delim '\$\(' ')' multiline begin
#  include "sh.lang" # 再帰呼び出しはできない様だ
#end



# notice that - is not a symbol since it can be used in command line parameters
symbol = "~","!","%","^","*","(",")","+","=","[",
        "]","\\",":",";",",",".","/","?","&","<",">","\|","%%"
symbol = '(##){2}(?!#)'
